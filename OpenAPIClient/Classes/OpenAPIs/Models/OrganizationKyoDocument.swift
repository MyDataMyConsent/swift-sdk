//
// OrganizationKyoDocument.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrganizationKyoDocument: Codable, Hashable {

    public var id: UUID?
    public var organizationId: UUID?
    public var documentName: String?
    public var storageUrl: String?
    public var uploadedAtUtc: Date?
    public var verifiedBy: UUID?
    public var verifiedAtUtc: Date?
    public var deletedBy: UUID?
    public var deletedAtUtc: Date?
    public var organization: Organization?
    public var verifiedByUser: ApplicationUser?
    public var deletedByUser: ApplicationUser?
    public var rejection: Rejection?

    public init(id: UUID? = nil, organizationId: UUID? = nil, documentName: String? = nil, storageUrl: String? = nil, uploadedAtUtc: Date? = nil, verifiedBy: UUID? = nil, verifiedAtUtc: Date? = nil, deletedBy: UUID? = nil, deletedAtUtc: Date? = nil, organization: Organization? = nil, verifiedByUser: ApplicationUser? = nil, deletedByUser: ApplicationUser? = nil, rejection: Rejection? = nil) {
        self.id = id
        self.organizationId = organizationId
        self.documentName = documentName
        self.storageUrl = storageUrl
        self.uploadedAtUtc = uploadedAtUtc
        self.verifiedBy = verifiedBy
        self.verifiedAtUtc = verifiedAtUtc
        self.deletedBy = deletedBy
        self.deletedAtUtc = deletedAtUtc
        self.organization = organization
        self.verifiedByUser = verifiedByUser
        self.deletedByUser = deletedByUser
        self.rejection = rejection
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case organizationId
        case documentName
        case storageUrl
        case uploadedAtUtc
        case verifiedBy
        case verifiedAtUtc
        case deletedBy
        case deletedAtUtc
        case organization
        case verifiedByUser
        case deletedByUser
        case rejection
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(organizationId, forKey: .organizationId)
        try container.encodeIfPresent(documentName, forKey: .documentName)
        try container.encodeIfPresent(storageUrl, forKey: .storageUrl)
        try container.encodeIfPresent(uploadedAtUtc, forKey: .uploadedAtUtc)
        try container.encodeIfPresent(verifiedBy, forKey: .verifiedBy)
        try container.encodeIfPresent(verifiedAtUtc, forKey: .verifiedAtUtc)
        try container.encodeIfPresent(deletedBy, forKey: .deletedBy)
        try container.encodeIfPresent(deletedAtUtc, forKey: .deletedAtUtc)
        try container.encodeIfPresent(organization, forKey: .organization)
        try container.encodeIfPresent(verifiedByUser, forKey: .verifiedByUser)
        try container.encodeIfPresent(deletedByUser, forKey: .deletedByUser)
        try container.encodeIfPresent(rejection, forKey: .rejection)
    }
}

