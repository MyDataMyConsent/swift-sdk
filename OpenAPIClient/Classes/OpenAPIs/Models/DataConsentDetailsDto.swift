//
// DataConsentDetailsDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DataConsentDetailsDto: Codable, Hashable {

    public var id: UUID?
    public var requester: DataConsentRequesterDto?
    public var location: String?
    public var personalInfoRequested: Bool?
    public var documents: Int?
    public var financialAccounts: Int?
    public var transactionId: String?
    public var ipAddress: String?
    public var description: String?
    public var purposeCode: String?
    public var purposeLink: String?
    public var agreementId: UUID?
    public var dataLifeUnit: DataLifeUnit?
    public var dataLifeValue: Int?
    public var dataFetchFrequencyUnit: DataFetchFrequencyUnit?
    public var dataFetchFrequencyUnitValue: Int?
    public var dataFetchType: DataFetchType?
    public var status: DataConsentStatus?
    public var approvedAtUtc: Date?
    public var rejectedAtUtc: Date?
    public var expiresAtUtc: Date?
    public var requestedAtUtc: Date?
    public var requestedFinancialAccounts: [DataConsentRequestedAccountDto]?
    public var requestedDocuments: [DataConsentRequestedDocumentDto]?
    public var requestedHealthData: [DataConsentRequestedDocument]?
    public var requestedIdentityDetails: JsonSchema?

    public init(id: UUID? = nil, requester: DataConsentRequesterDto? = nil, location: String? = nil, personalInfoRequested: Bool? = nil, documents: Int? = nil, financialAccounts: Int? = nil, transactionId: String? = nil, ipAddress: String? = nil, description: String? = nil, purposeCode: String? = nil, purposeLink: String? = nil, agreementId: UUID? = nil, dataLifeUnit: DataLifeUnit? = nil, dataLifeValue: Int? = nil, dataFetchFrequencyUnit: DataFetchFrequencyUnit? = nil, dataFetchFrequencyUnitValue: Int? = nil, dataFetchType: DataFetchType? = nil, status: DataConsentStatus? = nil, approvedAtUtc: Date? = nil, rejectedAtUtc: Date? = nil, expiresAtUtc: Date? = nil, requestedAtUtc: Date? = nil, requestedFinancialAccounts: [DataConsentRequestedAccountDto]? = nil, requestedDocuments: [DataConsentRequestedDocumentDto]? = nil, requestedHealthData: [DataConsentRequestedDocument]? = nil, requestedIdentityDetails: JsonSchema? = nil) {
        self.id = id
        self.requester = requester
        self.location = location
        self.personalInfoRequested = personalInfoRequested
        self.documents = documents
        self.financialAccounts = financialAccounts
        self.transactionId = transactionId
        self.ipAddress = ipAddress
        self.description = description
        self.purposeCode = purposeCode
        self.purposeLink = purposeLink
        self.agreementId = agreementId
        self.dataLifeUnit = dataLifeUnit
        self.dataLifeValue = dataLifeValue
        self.dataFetchFrequencyUnit = dataFetchFrequencyUnit
        self.dataFetchFrequencyUnitValue = dataFetchFrequencyUnitValue
        self.dataFetchType = dataFetchType
        self.status = status
        self.approvedAtUtc = approvedAtUtc
        self.rejectedAtUtc = rejectedAtUtc
        self.expiresAtUtc = expiresAtUtc
        self.requestedAtUtc = requestedAtUtc
        self.requestedFinancialAccounts = requestedFinancialAccounts
        self.requestedDocuments = requestedDocuments
        self.requestedHealthData = requestedHealthData
        self.requestedIdentityDetails = requestedIdentityDetails
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case requester
        case location
        case personalInfoRequested
        case documents
        case financialAccounts
        case transactionId
        case ipAddress
        case description
        case purposeCode
        case purposeLink
        case agreementId
        case dataLifeUnit
        case dataLifeValue
        case dataFetchFrequencyUnit
        case dataFetchFrequencyUnitValue
        case dataFetchType
        case status
        case approvedAtUtc
        case rejectedAtUtc
        case expiresAtUtc
        case requestedAtUtc
        case requestedFinancialAccounts
        case requestedDocuments
        case requestedHealthData
        case requestedIdentityDetails
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(requester, forKey: .requester)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(personalInfoRequested, forKey: .personalInfoRequested)
        try container.encodeIfPresent(documents, forKey: .documents)
        try container.encodeIfPresent(financialAccounts, forKey: .financialAccounts)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
        try container.encodeIfPresent(ipAddress, forKey: .ipAddress)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(purposeCode, forKey: .purposeCode)
        try container.encodeIfPresent(purposeLink, forKey: .purposeLink)
        try container.encodeIfPresent(agreementId, forKey: .agreementId)
        try container.encodeIfPresent(dataLifeUnit, forKey: .dataLifeUnit)
        try container.encodeIfPresent(dataLifeValue, forKey: .dataLifeValue)
        try container.encodeIfPresent(dataFetchFrequencyUnit, forKey: .dataFetchFrequencyUnit)
        try container.encodeIfPresent(dataFetchFrequencyUnitValue, forKey: .dataFetchFrequencyUnitValue)
        try container.encodeIfPresent(dataFetchType, forKey: .dataFetchType)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(approvedAtUtc, forKey: .approvedAtUtc)
        try container.encodeIfPresent(rejectedAtUtc, forKey: .rejectedAtUtc)
        try container.encodeIfPresent(expiresAtUtc, forKey: .expiresAtUtc)
        try container.encodeIfPresent(requestedAtUtc, forKey: .requestedAtUtc)
        try container.encodeIfPresent(requestedFinancialAccounts, forKey: .requestedFinancialAccounts)
        try container.encodeIfPresent(requestedDocuments, forKey: .requestedDocuments)
        try container.encodeIfPresent(requestedHealthData, forKey: .requestedHealthData)
        try container.encodeIfPresent(requestedIdentityDetails, forKey: .requestedIdentityDetails)
    }
}

