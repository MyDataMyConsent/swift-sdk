//
// ApplicationUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ApplicationUser: Codable, Hashable {

    public var id: UUID?
    public var userName: String?
    public var normalizedUserName: String?
    public var email: String?
    public var normalizedEmail: String?
    public var emailConfirmed: Bool?
    public var passwordHash: String?
    public var securityStamp: String?
    public var concurrencyStamp: String?
    public var phoneNumber: String?
    public var phoneNumberConfirmed: Bool?
    public var twoFactorEnabled: Bool?
    public var lockoutEnd: Date?
    public var lockoutEnabled: Bool?
    public var accessFailedCount: Int?
    public var firstName: String?
    public var middleName: String?
    public var lastName: String?
    public var fullName: String?
    public var gender: Gender?
    public var dateOfBirth: Date?
    public var countryId: UUID?
    public var postCode: String?
    public var referredBy: UUID?
    public var language: String?
    public var theme: Theme?
    public var designation: String?
    public var isMarkedForDeletion: Bool?
    public var hardDeleteDate: Date?
    public var securityPin: String?
    public var photoUrl: String?
    public var referralCode: String?
    public var recoveryToken: String?
    public var digiLockerLastSyncDate: Date?
    public var refreshTokens: [RefreshToken]?
    public var country: Country?
    public var referredByUser: ApplicationUser?

    public init(id: UUID? = nil, userName: String? = nil, normalizedUserName: String? = nil, email: String? = nil, normalizedEmail: String? = nil, emailConfirmed: Bool? = nil, passwordHash: String? = nil, securityStamp: String? = nil, concurrencyStamp: String? = nil, phoneNumber: String? = nil, phoneNumberConfirmed: Bool? = nil, twoFactorEnabled: Bool? = nil, lockoutEnd: Date? = nil, lockoutEnabled: Bool? = nil, accessFailedCount: Int? = nil, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, fullName: String? = nil, gender: Gender? = nil, dateOfBirth: Date? = nil, countryId: UUID? = nil, postCode: String? = nil, referredBy: UUID? = nil, language: String? = nil, theme: Theme? = nil, designation: String? = nil, isMarkedForDeletion: Bool? = nil, hardDeleteDate: Date? = nil, securityPin: String? = nil, photoUrl: String? = nil, referralCode: String? = nil, recoveryToken: String? = nil, digiLockerLastSyncDate: Date? = nil, refreshTokens: [RefreshToken]? = nil, country: Country? = nil, referredByUser: ApplicationUser? = nil) {
        self.id = id
        self.userName = userName
        self.normalizedUserName = normalizedUserName
        self.email = email
        self.normalizedEmail = normalizedEmail
        self.emailConfirmed = emailConfirmed
        self.passwordHash = passwordHash
        self.securityStamp = securityStamp
        self.concurrencyStamp = concurrencyStamp
        self.phoneNumber = phoneNumber
        self.phoneNumberConfirmed = phoneNumberConfirmed
        self.twoFactorEnabled = twoFactorEnabled
        self.lockoutEnd = lockoutEnd
        self.lockoutEnabled = lockoutEnabled
        self.accessFailedCount = accessFailedCount
        self.firstName = firstName
        self.middleName = middleName
        self.lastName = lastName
        self.fullName = fullName
        self.gender = gender
        self.dateOfBirth = dateOfBirth
        self.countryId = countryId
        self.postCode = postCode
        self.referredBy = referredBy
        self.language = language
        self.theme = theme
        self.designation = designation
        self.isMarkedForDeletion = isMarkedForDeletion
        self.hardDeleteDate = hardDeleteDate
        self.securityPin = securityPin
        self.photoUrl = photoUrl
        self.referralCode = referralCode
        self.recoveryToken = recoveryToken
        self.digiLockerLastSyncDate = digiLockerLastSyncDate
        self.refreshTokens = refreshTokens
        self.country = country
        self.referredByUser = referredByUser
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userName
        case normalizedUserName
        case email
        case normalizedEmail
        case emailConfirmed
        case passwordHash
        case securityStamp
        case concurrencyStamp
        case phoneNumber
        case phoneNumberConfirmed
        case twoFactorEnabled
        case lockoutEnd
        case lockoutEnabled
        case accessFailedCount
        case firstName
        case middleName
        case lastName
        case fullName
        case gender
        case dateOfBirth
        case countryId
        case postCode
        case referredBy
        case language
        case theme
        case designation
        case isMarkedForDeletion
        case hardDeleteDate
        case securityPin
        case photoUrl
        case referralCode
        case recoveryToken
        case digiLockerLastSyncDate
        case refreshTokens
        case country
        case referredByUser
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(userName, forKey: .userName)
        try container.encodeIfPresent(normalizedUserName, forKey: .normalizedUserName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(normalizedEmail, forKey: .normalizedEmail)
        try container.encodeIfPresent(emailConfirmed, forKey: .emailConfirmed)
        try container.encodeIfPresent(passwordHash, forKey: .passwordHash)
        try container.encodeIfPresent(securityStamp, forKey: .securityStamp)
        try container.encodeIfPresent(concurrencyStamp, forKey: .concurrencyStamp)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(phoneNumberConfirmed, forKey: .phoneNumberConfirmed)
        try container.encodeIfPresent(twoFactorEnabled, forKey: .twoFactorEnabled)
        try container.encodeIfPresent(lockoutEnd, forKey: .lockoutEnd)
        try container.encodeIfPresent(lockoutEnabled, forKey: .lockoutEnabled)
        try container.encodeIfPresent(accessFailedCount, forKey: .accessFailedCount)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(middleName, forKey: .middleName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(postCode, forKey: .postCode)
        try container.encodeIfPresent(referredBy, forKey: .referredBy)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(theme, forKey: .theme)
        try container.encodeIfPresent(designation, forKey: .designation)
        try container.encodeIfPresent(isMarkedForDeletion, forKey: .isMarkedForDeletion)
        try container.encodeIfPresent(hardDeleteDate, forKey: .hardDeleteDate)
        try container.encodeIfPresent(securityPin, forKey: .securityPin)
        try container.encodeIfPresent(photoUrl, forKey: .photoUrl)
        try container.encodeIfPresent(referralCode, forKey: .referralCode)
        try container.encodeIfPresent(recoveryToken, forKey: .recoveryToken)
        try container.encodeIfPresent(digiLockerLastSyncDate, forKey: .digiLockerLastSyncDate)
        try container.encodeIfPresent(refreshTokens, forKey: .refreshTokens)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(referredByUser, forKey: .referredByUser)
    }
}

