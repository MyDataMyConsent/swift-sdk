//
// DataConsentRequestedAccountDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DataConsentRequestedAccountDto: Codable, Hashable {

    public var name: String?
    public var accountTypeId: UUID?
    public var suggestedAccounts: [SuggestedAccountDto]?
    public var issuer: [String]?
    public var issuerLogoUrls: [String]?
    public var requestedDataType: String?
    public var _optional: Bool?

    public init(name: String? = nil, accountTypeId: UUID? = nil, suggestedAccounts: [SuggestedAccountDto]? = nil, issuer: [String]? = nil, issuerLogoUrls: [String]? = nil, requestedDataType: String? = nil, _optional: Bool? = nil) {
        self.name = name
        self.accountTypeId = accountTypeId
        self.suggestedAccounts = suggestedAccounts
        self.issuer = issuer
        self.issuerLogoUrls = issuerLogoUrls
        self.requestedDataType = requestedDataType
        self._optional = _optional
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case accountTypeId
        case suggestedAccounts
        case issuer
        case issuerLogoUrls
        case requestedDataType
        case _optional = "optional"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(accountTypeId, forKey: .accountTypeId)
        try container.encodeIfPresent(suggestedAccounts, forKey: .suggestedAccounts)
        try container.encodeIfPresent(issuer, forKey: .issuer)
        try container.encodeIfPresent(issuerLogoUrls, forKey: .issuerLogoUrls)
        try container.encodeIfPresent(requestedDataType, forKey: .requestedDataType)
        try container.encodeIfPresent(_optional, forKey: ._optional)
    }
}

