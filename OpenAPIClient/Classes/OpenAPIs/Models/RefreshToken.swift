//
// RefreshToken.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RefreshToken: Codable, Hashable {

    public var createdBy: UUID?
    public var createdAtUtc: Date?
    public var updatedBy: UUID?
    public var updatedAtUtc: Date?
    public var createdByUser: ApplicationUser?
    public var updatedByUser: ApplicationUser?
    public var deletedBy: UUID?
    public var deletedAtUtc: Date?
    public var deletedByUser: ApplicationUser?
    public var id: UUID?
    public var installationId: String?
    public var token: String?
    public var accessToken: String?
    public var accessTokenExpires: Date?
    public var expires: Date?
    public var isExpired: Bool?
    public var created: Date?
    public var revoked: Date?
    public var isActive: Bool?
    public var userId: UUID?
    public var user: ApplicationUser?

    public init(createdBy: UUID? = nil, createdAtUtc: Date? = nil, updatedBy: UUID? = nil, updatedAtUtc: Date? = nil, createdByUser: ApplicationUser? = nil, updatedByUser: ApplicationUser? = nil, deletedBy: UUID? = nil, deletedAtUtc: Date? = nil, deletedByUser: ApplicationUser? = nil, id: UUID? = nil, installationId: String? = nil, token: String? = nil, accessToken: String? = nil, accessTokenExpires: Date? = nil, expires: Date? = nil, isExpired: Bool? = nil, created: Date? = nil, revoked: Date? = nil, isActive: Bool? = nil, userId: UUID? = nil, user: ApplicationUser? = nil) {
        self.createdBy = createdBy
        self.createdAtUtc = createdAtUtc
        self.updatedBy = updatedBy
        self.updatedAtUtc = updatedAtUtc
        self.createdByUser = createdByUser
        self.updatedByUser = updatedByUser
        self.deletedBy = deletedBy
        self.deletedAtUtc = deletedAtUtc
        self.deletedByUser = deletedByUser
        self.id = id
        self.installationId = installationId
        self.token = token
        self.accessToken = accessToken
        self.accessTokenExpires = accessTokenExpires
        self.expires = expires
        self.isExpired = isExpired
        self.created = created
        self.revoked = revoked
        self.isActive = isActive
        self.userId = userId
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdBy
        case createdAtUtc
        case updatedBy
        case updatedAtUtc
        case createdByUser
        case updatedByUser
        case deletedBy
        case deletedAtUtc
        case deletedByUser
        case id
        case installationId
        case token
        case accessToken
        case accessTokenExpires
        case expires
        case isExpired
        case created
        case revoked
        case isActive
        case userId
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(createdAtUtc, forKey: .createdAtUtc)
        try container.encodeIfPresent(updatedBy, forKey: .updatedBy)
        try container.encodeIfPresent(updatedAtUtc, forKey: .updatedAtUtc)
        try container.encodeIfPresent(createdByUser, forKey: .createdByUser)
        try container.encodeIfPresent(updatedByUser, forKey: .updatedByUser)
        try container.encodeIfPresent(deletedBy, forKey: .deletedBy)
        try container.encodeIfPresent(deletedAtUtc, forKey: .deletedAtUtc)
        try container.encodeIfPresent(deletedByUser, forKey: .deletedByUser)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(installationId, forKey: .installationId)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(accessToken, forKey: .accessToken)
        try container.encodeIfPresent(accessTokenExpires, forKey: .accessTokenExpires)
        try container.encodeIfPresent(expires, forKey: .expires)
        try container.encodeIfPresent(isExpired, forKey: .isExpired)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(revoked, forKey: .revoked)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

