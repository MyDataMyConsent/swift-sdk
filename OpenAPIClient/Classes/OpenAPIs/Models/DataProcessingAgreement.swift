//
// DataProcessingAgreement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DataProcessingAgreement: Codable, Hashable {

    public var createdBy: UUID?
    public var createdAtUtc: Date?
    public var updatedBy: UUID?
    public var updatedAtUtc: Date?
    public var createdByUser: ApplicationUser?
    public var updatedByUser: ApplicationUser?
    public var deletedBy: UUID?
    public var deletedAtUtc: Date?
    public var deletedByUser: ApplicationUser?
    public var id: UUID?
    public var organizationId: UUID?
    public var version: String?
    public var body: String?
    public var attachmentUrl: String?
    public var organization: Organization?

    public init(createdBy: UUID? = nil, createdAtUtc: Date? = nil, updatedBy: UUID? = nil, updatedAtUtc: Date? = nil, createdByUser: ApplicationUser? = nil, updatedByUser: ApplicationUser? = nil, deletedBy: UUID? = nil, deletedAtUtc: Date? = nil, deletedByUser: ApplicationUser? = nil, id: UUID? = nil, organizationId: UUID? = nil, version: String? = nil, body: String? = nil, attachmentUrl: String? = nil, organization: Organization? = nil) {
        self.createdBy = createdBy
        self.createdAtUtc = createdAtUtc
        self.updatedBy = updatedBy
        self.updatedAtUtc = updatedAtUtc
        self.createdByUser = createdByUser
        self.updatedByUser = updatedByUser
        self.deletedBy = deletedBy
        self.deletedAtUtc = deletedAtUtc
        self.deletedByUser = deletedByUser
        self.id = id
        self.organizationId = organizationId
        self.version = version
        self.body = body
        self.attachmentUrl = attachmentUrl
        self.organization = organization
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdBy
        case createdAtUtc
        case updatedBy
        case updatedAtUtc
        case createdByUser
        case updatedByUser
        case deletedBy
        case deletedAtUtc
        case deletedByUser
        case id
        case organizationId
        case version
        case body
        case attachmentUrl
        case organization
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(createdAtUtc, forKey: .createdAtUtc)
        try container.encodeIfPresent(updatedBy, forKey: .updatedBy)
        try container.encodeIfPresent(updatedAtUtc, forKey: .updatedAtUtc)
        try container.encodeIfPresent(createdByUser, forKey: .createdByUser)
        try container.encodeIfPresent(updatedByUser, forKey: .updatedByUser)
        try container.encodeIfPresent(deletedBy, forKey: .deletedBy)
        try container.encodeIfPresent(deletedAtUtc, forKey: .deletedAtUtc)
        try container.encodeIfPresent(deletedByUser, forKey: .deletedByUser)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(organizationId, forKey: .organizationId)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(attachmentUrl, forKey: .attachmentUrl)
        try container.encodeIfPresent(organization, forKey: .organization)
    }
}

