//
// DataConsentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DataConsentsAPI {

    /**
     Get consented financial account details.
     
     - parameter consentId: (path)  
     - parameter accountId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1ConsentsConsentIdAccountsAccountIdGet(consentId: String, accountId: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        v1ConsentsConsentIdAccountsAccountIdGetWithRequestBuilder(consentId: consentId, accountId: accountId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get consented financial account details.
     - GET /v1/consents/{consentId}/accounts/{accountId}
     - parameter consentId: (path)  
     - parameter accountId: (path)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func v1ConsentsConsentIdAccountsAccountIdGetWithRequestBuilder(consentId: String, accountId: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1/consents/{consentId}/accounts/{accountId}"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get consented financial account insights.
     
     - parameter consentId: (path)  
     - parameter accountId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1ConsentsConsentIdAccountsAccountIdInsightsGet(consentId: String, accountId: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        v1ConsentsConsentIdAccountsAccountIdInsightsGetWithRequestBuilder(consentId: consentId, accountId: accountId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get consented financial account insights.
     - GET /v1/consents/{consentId}/accounts/{accountId}/insights
     - parameter consentId: (path)  
     - parameter accountId: (path)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func v1ConsentsConsentIdAccountsAccountIdInsightsGetWithRequestBuilder(consentId: String, accountId: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1/consents/{consentId}/accounts/{accountId}/insights"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get consented financial account transactions.
     
     - parameter consentId: (path)  
     - parameter accountId: (path)  
     - parameter filters: (query)  (optional)
     - parameter fromDate: (query)  (optional)
     - parameter toDate: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1ConsentsConsentIdAccountsAccountIdTransactionsGet(consentId: String, accountId: String, filters: String? = nil, fromDate: Date? = nil, toDate: Date? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        v1ConsentsConsentIdAccountsAccountIdTransactionsGetWithRequestBuilder(consentId: consentId, accountId: accountId, filters: filters, fromDate: fromDate, toDate: toDate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get consented financial account transactions.
     - GET /v1/consents/{consentId}/accounts/{accountId}/transactions
     - parameter consentId: (path)  
     - parameter accountId: (path)  
     - parameter filters: (query)  (optional)
     - parameter fromDate: (query)  (optional)
     - parameter toDate: (query)  (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func v1ConsentsConsentIdAccountsAccountIdTransactionsGetWithRequestBuilder(consentId: String, accountId: String, filters: String? = nil, fromDate: Date? = nil, toDate: Date? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1/consents/{consentId}/accounts/{accountId}/transactions"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filters": filters?.encodeToJSON(),
            "fromDate": fromDate?.encodeToJSON(),
            "toDate": toDate?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all accounts in a consent.
     
     - parameter consentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1ConsentsConsentIdAccountsGet(consentId: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        v1ConsentsConsentIdAccountsGetWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all accounts in a consent.
     - GET /v1/consents/{consentId}/accounts
     - parameter consentId: (path)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func v1ConsentsConsentIdAccountsGetWithRequestBuilder(consentId: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1/consents/{consentId}/accounts"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get analysis of a consented document.
     
     - parameter consentId: (path)  
     - parameter documentId: (path) Document Id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1ConsentsConsentIdDocumentsDocumentIdAnalysisGet(consentId: String, documentId: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        v1ConsentsConsentIdDocumentsDocumentIdAnalysisGetWithRequestBuilder(consentId: consentId, documentId: documentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get analysis of a consented document.
     - GET /v1/consents/{consentId}/documents/{documentId}/analysis
     - parameter consentId: (path)  
     - parameter documentId: (path) Document Id. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func v1ConsentsConsentIdDocumentsDocumentIdAnalysisGetWithRequestBuilder(consentId: String, documentId: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1/consents/{consentId}/documents/{documentId}/analysis"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Download a consented document.
     
     - parameter consentId: (path)  
     - parameter documentId: (path) Document Id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1ConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId: String, documentId: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        v1ConsentsConsentIdDocumentsDocumentIdDownloadGetWithRequestBuilder(consentId: consentId, documentId: documentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download a consented document.
     - GET /v1/consents/{consentId}/documents/{documentId}/download
     - parameter consentId: (path)  
     - parameter documentId: (path) Document Id. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func v1ConsentsConsentIdDocumentsDocumentIdDownloadGetWithRequestBuilder(consentId: String, documentId: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1/consents/{consentId}/documents/{documentId}/download"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get consented document details.
     
     - parameter consentId: (path)  
     - parameter documentId: (path) Document Id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1ConsentsConsentIdDocumentsDocumentIdGet(consentId: String, documentId: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        v1ConsentsConsentIdDocumentsDocumentIdGetWithRequestBuilder(consentId: consentId, documentId: documentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get consented document details.
     - GET /v1/consents/{consentId}/documents/{documentId}
     - parameter consentId: (path)  
     - parameter documentId: (path) Document Id. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func v1ConsentsConsentIdDocumentsDocumentIdGetWithRequestBuilder(consentId: String, documentId: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1/consents/{consentId}/documents/{documentId}"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all documents in a consent.
     
     - parameter consentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1ConsentsConsentIdDocumentsGet(consentId: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        v1ConsentsConsentIdDocumentsGetWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all documents in a consent.
     - GET /v1/consents/{consentId}/documents
     - parameter consentId: (path)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func v1ConsentsConsentIdDocumentsGetWithRequestBuilder(consentId: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1/consents/{consentId}/documents"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get consent details by consent id.
     
     - parameter consentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1ConsentsConsentIdGet(consentId: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        v1ConsentsConsentIdGetWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get consent details by consent id.
     - GET /v1/consents/{consentId}
     - parameter consentId: (path)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func v1ConsentsConsentIdGetWithRequestBuilder(consentId: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1/consents/{consentId}"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all consents filtered by status and time.
     
     - parameter status: (query) MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     - parameter startDate: (query) System.DateTime. (optional)
     - parameter endDate: (query) till dateSystem.DateTime. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v1ConsentsGet(status: DataConsentStatus? = nil, startDate: Date? = nil, endDate: Date? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        v1ConsentsGetWithRequestBuilder(status: status, startDate: startDate, endDate: endDate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all consents filtered by status and time.
     - GET /v1/consents
     - parameter status: (query) MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     - parameter startDate: (query) System.DateTime. (optional)
     - parameter endDate: (query) till dateSystem.DateTime. (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func v1ConsentsGetWithRequestBuilder(status: DataConsentStatus? = nil, startDate: Date? = nil, endDate: Date? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/v1/consents"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": status?.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
