//
// DataConsentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DataConsentsAPI {

    /**
     Get analysis of a consented document.
     
     - parameter consentId: (path)  
     - parameter documentId: (path) Document Id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func downloadConsentedDocumentAnalysis(consentId: String, documentId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return downloadConsentedDocumentAnalysisWithRequestBuilder(consentId: consentId, documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get analysis of a consented document.
     - GET /v1/consents/{consentId}/documents/{documentId}/analysis
     - parameter consentId: (path)  
     - parameter documentId: (path) Document Id. 
     - returns: RequestBuilder<Void> 
     */
    open class func downloadConsentedDocumentAnalysisWithRequestBuilder(consentId: String, documentId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/consents/{consentId}/documents/{documentId}/analysis"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = MyDataMyConsentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Download a individuals consented document.
     
     - parameter consentId: (path) Consent id. 
     - parameter documentId: (path) Document id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func downloadConsentedDocumentById(consentId: UUID, documentId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: UserDocumentDownload?, _ error: Error?) -> Void)) -> RequestTask {
        return downloadConsentedDocumentByIdWithRequestBuilder(consentId: consentId, documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download a individuals consented document.
     - GET /v1/consents/individuals/{consentId}/documents/{documentId}/download
     - parameter consentId: (path) Consent id. 
     - parameter documentId: (path) Document id. 
     - returns: RequestBuilder<UserDocumentDownload> 
     */
    open class func downloadConsentedDocumentByIdWithRequestBuilder(consentId: UUID, documentId: UUID) -> RequestBuilder<UserDocumentDownload> {
        var localVariablePath = "/v1/consents/individuals/{consentId}/documents/{documentId}/download"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDocumentDownload>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Download a organizations consented document.
     
     - parameter consentId: (path) Consent id. 
     - parameter documentId: (path) Document id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func downloadOrgConsentedDocumentById(consentId: UUID, documentId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: OrganizationDocumentDownloadDto?, _ error: Error?) -> Void)) -> RequestTask {
        return downloadOrgConsentedDocumentByIdWithRequestBuilder(consentId: consentId, documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download a organizations consented document.
     - GET /v1/consents/organizations/{consentId}/documents/{documentId}/download
     - parameter consentId: (path) Consent id. 
     - parameter documentId: (path) Document id. 
     - returns: RequestBuilder<OrganizationDocumentDownloadDto> 
     */
    open class func downloadOrgConsentedDocumentByIdWithRequestBuilder(consentId: UUID, documentId: UUID) -> RequestBuilder<OrganizationDocumentDownloadDto> {
        var localVariablePath = "/v1/consents/organizations/{consentId}/documents/{documentId}/download"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrganizationDocumentDownloadDto>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get the individual documents based on ConsentId.
     
     - parameter consentId: (path) Consent id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllConsentedDocuments(consentId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DataConsentDocumentsDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllConsentedDocumentsWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the individual documents based on ConsentId.
     - GET /v1/consents/individuals/{consentId}/documents
     - parameter consentId: (path) Consent id. 
     - returns: RequestBuilder<DataConsentDocumentsDto> 
     */
    open class func getAllConsentedDocumentsWithRequestBuilder(consentId: UUID) -> RequestBuilder<DataConsentDocumentsDto> {
        var localVariablePath = "/v1/consents/individuals/{consentId}/documents"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataConsentDocumentsDto>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all individual consented financial accounts.
     
     - parameter consentId: (path) Consent id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllConsentedFinancialAccounts(consentId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DataConsentFinancialsDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllConsentedFinancialAccountsWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all individual consented financial accounts.
     - GET /v1/consents/individuals/{consentId}/financial-accounts
     - parameter consentId: (path) Consent id. 
     - returns: RequestBuilder<DataConsentFinancialsDto> 
     */
    open class func getAllConsentedFinancialAccountsWithRequestBuilder(consentId: UUID) -> RequestBuilder<DataConsentFinancialsDto> {
        var localVariablePath = "/v1/consents/individuals/{consentId}/financial-accounts"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataConsentFinancialsDto>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get the organization documents based on ConsentId.
     
     - parameter consentId: (path) Consent id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllOrganizationConsentedDocuments(consentId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DataConsentDocumentsDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllOrganizationConsentedDocumentsWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the organization documents based on ConsentId.
     - GET /v1/consents/organizations/{consentId}/documents
     - parameter consentId: (path) Consent id. 
     - returns: RequestBuilder<DataConsentDocumentsDto> 
     */
    open class func getAllOrganizationConsentedDocumentsWithRequestBuilder(consentId: UUID) -> RequestBuilder<DataConsentDocumentsDto> {
        var localVariablePath = "/v1/consents/organizations/{consentId}/documents"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataConsentDocumentsDto>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all individuals consent details by consent id.
     
     - parameter consentId: (path) Consent id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConsentDetailsById(consentId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DataConsentDetailsDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getConsentDetailsByIdWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all individuals consent details by consent id.
     - GET /v1/consents/individuals/{consentId}
     - parameter consentId: (path) Consent id. 
     - returns: RequestBuilder<DataConsentDetailsDto> 
     */
    open class func getConsentDetailsByIdWithRequestBuilder(consentId: UUID) -> RequestBuilder<DataConsentDetailsDto> {
        var localVariablePath = "/v1/consents/individuals/{consentId}"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataConsentDetailsDto>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all organizational consented financial accounts.
     
     - parameter consentId: (path) Consent id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConsentFinancialAccounts(consentId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DataConsentFinancialsDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getConsentFinancialAccountsWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all organizational consented financial accounts.
     - GET /v1/consents/organizations/{consentId}/financial-accounts
     - parameter consentId: (path) Consent id. 
     - returns: RequestBuilder<DataConsentFinancialsDto> 
     */
    open class func getConsentFinancialAccountsWithRequestBuilder(consentId: UUID) -> RequestBuilder<DataConsentFinancialsDto> {
        var localVariablePath = "/v1/consents/organizations/{consentId}/financial-accounts"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataConsentFinancialsDto>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get individual consented financial account details based on account id.
     
     - parameter consentId: (path) Consent id. 
     - parameter accountId: (path) Account id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConsentedAccountById(consentId: UUID, accountId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: FinancialAccount?, _ error: Error?) -> Void)) -> RequestTask {
        return getConsentedAccountByIdWithRequestBuilder(consentId: consentId, accountId: accountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get individual consented financial account details based on account id.
     - GET /v1/consents/individuals/{consentId}/financial-accounts/{accountId}
     - parameter consentId: (path) Consent id. 
     - parameter accountId: (path) Account id. 
     - returns: RequestBuilder<FinancialAccount> 
     */
    open class func getConsentedAccountByIdWithRequestBuilder(consentId: UUID, accountId: UUID) -> RequestBuilder<FinancialAccount> {
        var localVariablePath = "/v1/consents/individuals/{consentId}/financial-accounts/{accountId}"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FinancialAccount>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get individuals consent document based on document id.
     
     - parameter consentId: (path) Consent id. 
     - parameter documentId: (path) Document Id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConsentedDocumentById(consentId: UUID, documentId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: UserDocumentDetails?, _ error: Error?) -> Void)) -> RequestTask {
        return getConsentedDocumentByIdWithRequestBuilder(consentId: consentId, documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get individuals consent document based on document id.
     - GET /v1/consents/individuals/{consentId}/documents/{documentId}
     - parameter consentId: (path) Consent id. 
     - parameter documentId: (path) Document Id. 
     - returns: RequestBuilder<UserDocumentDetails> 
     */
    open class func getConsentedDocumentByIdWithRequestBuilder(consentId: UUID, documentId: UUID) -> RequestBuilder<UserDocumentDetails> {
        var localVariablePath = "/v1/consents/individuals/{consentId}/documents/{documentId}"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDocumentDetails>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get organization consented financial account details based on account id.
     
     - parameter consentId: (path) Consent id. 
     - parameter accountId: (path) Account id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConsentedFinancialAccount(consentId: UUID, accountId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: OrganizationFinancialAccountDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getConsentedFinancialAccountWithRequestBuilder(consentId: consentId, accountId: accountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get organization consented financial account details based on account id.
     - GET /v1/consents/organizations/{consentId}/financial-accounts/{accountId}
     - parameter consentId: (path) Consent id. 
     - parameter accountId: (path) Account id. 
     - returns: RequestBuilder<OrganizationFinancialAccountDto> 
     */
    open class func getConsentedFinancialAccountWithRequestBuilder(consentId: UUID, accountId: UUID) -> RequestBuilder<OrganizationFinancialAccountDto> {
        var localVariablePath = "/v1/consents/organizations/{consentId}/financial-accounts/{accountId}"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrganizationFinancialAccountDto>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get consented financial account insights.
     
     - parameter consentId: (path)  
     - parameter accountId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConsentedFinancialAccountInsights(consentId: String, accountId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getConsentedFinancialAccountInsightsWithRequestBuilder(consentId: consentId, accountId: accountId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get consented financial account insights.
     - GET /v1/consents/{consentId}/financial-accounts/{accountId}/insights
     - parameter consentId: (path)  
     - parameter accountId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getConsentedFinancialAccountInsightsWithRequestBuilder(consentId: String, accountId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/consents/{consentId}/financial-accounts/{accountId}/insights"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = MyDataMyConsentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get individual consented financial account transactions of an individual based on accountId.
     
     - parameter consentId: (path) Consent id. 
     - parameter accountId: (path) Account id. 
     - parameter filters: (query) Filters. (optional)
     - parameter fromDateTimeUtc: (query) From date time in utc timezone. (optional)
     - parameter toDateTimeUtc: (query) Til date time in utc timezone. (optional)
     - parameter pageNo: (query) Page number. (optional, default to 10)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConsentedFinancialAccountTransactions(consentId: UUID, accountId: UUID, filters: String? = nil, fromDateTimeUtc: Date? = nil, toDateTimeUtc: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: UserAccountFinancialTransactionsDtoPaginatedList?, _ error: Error?) -> Void)) -> RequestTask {
        return getConsentedFinancialAccountTransactionsWithRequestBuilder(consentId: consentId, accountId: accountId, filters: filters, fromDateTimeUtc: fromDateTimeUtc, toDateTimeUtc: toDateTimeUtc, pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get individual consented financial account transactions of an individual based on accountId.
     - GET /v1/consents/individuals/{consentId}/financial-accounts/{accountId}/transactions
     - parameter consentId: (path) Consent id. 
     - parameter accountId: (path) Account id. 
     - parameter filters: (query) Filters. (optional)
     - parameter fromDateTimeUtc: (query) From date time in utc timezone. (optional)
     - parameter toDateTimeUtc: (query) Til date time in utc timezone. (optional)
     - parameter pageNo: (query) Page number. (optional, default to 10)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - returns: RequestBuilder<UserAccountFinancialTransactionsDtoPaginatedList> 
     */
    open class func getConsentedFinancialAccountTransactionsWithRequestBuilder(consentId: UUID, accountId: UUID, filters: String? = nil, fromDateTimeUtc: Date? = nil, toDateTimeUtc: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<UserAccountFinancialTransactionsDtoPaginatedList> {
        var localVariablePath = "/v1/consents/individuals/{consentId}/financial-accounts/{accountId}/transactions"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filters": filters?.encodeToJSON(),
            "fromDateTimeUtc": fromDateTimeUtc?.encodeToJSON(),
            "toDateTimeUtc": toDateTimeUtc?.encodeToJSON(),
            "pageNo": pageNo?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserAccountFinancialTransactionsDtoPaginatedList>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get the list of data consents sent for organizations.
     
     - parameter status: (query) Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     - parameter from: (query) From date time in utc timezone. (optional)
     - parameter to: (query) Til date time in utc timezone. (optional)
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConsentsForOrganizations(status: DataConsentStatus? = nil, from: Date? = nil, to: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: OrganizationDataConsentInfoDtoPaginatedList?, _ error: Error?) -> Void)) -> RequestTask {
        return getConsentsForOrganizationsWithRequestBuilder(status: status, from: from, to: to, pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of data consents sent for organizations.
     - GET /v1/consents/organizations
     - parameter status: (query) Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     - parameter from: (query) From date time in utc timezone. (optional)
     - parameter to: (query) Til date time in utc timezone. (optional)
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - returns: RequestBuilder<OrganizationDataConsentInfoDtoPaginatedList> 
     */
    open class func getConsentsForOrganizationsWithRequestBuilder(status: DataConsentStatus? = nil, from: Date? = nil, to: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<OrganizationDataConsentInfoDtoPaginatedList> {
        let localVariablePath = "/v1/consents/organizations"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": status?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "to": to?.encodeToJSON(),
            "pageNo": pageNo?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrganizationDataConsentInfoDtoPaginatedList>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get the list of Consents Sent to Individuals.
     
     - parameter status: (query) Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     - parameter from: (query) From date time in utc timezone. (optional)
     - parameter to: (query) Til date time in utc timezone. (optional)
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConsentsSentToIndividuals(status: DataConsentStatus? = nil, from: Date? = nil, to: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: UserDataConsentInfoDtoPaginatedList?, _ error: Error?) -> Void)) -> RequestTask {
        return getConsentsSentToIndividualsWithRequestBuilder(status: status, from: from, to: to, pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of Consents Sent to Individuals.
     - GET /v1/consents/individuals
     - parameter status: (query) Data consent status MyDataMyConsent.Domain.Entities.ConsentAggregate.Enums.DataConsentStatus. (optional)
     - parameter from: (query) From date time in utc timezone. (optional)
     - parameter to: (query) Til date time in utc timezone. (optional)
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - returns: RequestBuilder<UserDataConsentInfoDtoPaginatedList> 
     */
    open class func getConsentsSentToIndividualsWithRequestBuilder(status: DataConsentStatus? = nil, from: Date? = nil, to: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<UserDataConsentInfoDtoPaginatedList> {
        let localVariablePath = "/v1/consents/individuals"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": status?.encodeToJSON(),
            "from": from?.encodeToJSON(),
            "to": to?.encodeToJSON(),
            "pageNo": pageNo?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDataConsentInfoDtoPaginatedList>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get organization consented financial account transactions of an individual based on accountId.
     
     - parameter consentId: (path) Consent id. 
     - parameter accountId: (path) Account id. 
     - parameter filters: (query) Filters. (optional)
     - parameter fromDateTimeUtc: (query) From date time in utc timezone. (optional)
     - parameter toDateTimeUtc: (query) Til date time in utc timezone. (optional)
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOrgConsentedAccountTransactions(consentId: UUID, accountId: UUID, filters: String? = nil, fromDateTimeUtc: Date? = nil, toDateTimeUtc: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: OrganizationFinancialTransactionsDtoPaginatedList?, _ error: Error?) -> Void)) -> RequestTask {
        return getOrgConsentedAccountTransactionsWithRequestBuilder(consentId: consentId, accountId: accountId, filters: filters, fromDateTimeUtc: fromDateTimeUtc, toDateTimeUtc: toDateTimeUtc, pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get organization consented financial account transactions of an individual based on accountId.
     - GET /v1/consents/organizations/{consentId}/financial-accounts/{accountId}/transactions
     - parameter consentId: (path) Consent id. 
     - parameter accountId: (path) Account id. 
     - parameter filters: (query) Filters. (optional)
     - parameter fromDateTimeUtc: (query) From date time in utc timezone. (optional)
     - parameter toDateTimeUtc: (query) Til date time in utc timezone. (optional)
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - returns: RequestBuilder<OrganizationFinancialTransactionsDtoPaginatedList> 
     */
    open class func getOrgConsentedAccountTransactionsWithRequestBuilder(consentId: UUID, accountId: UUID, filters: String? = nil, fromDateTimeUtc: Date? = nil, toDateTimeUtc: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<OrganizationFinancialTransactionsDtoPaginatedList> {
        var localVariablePath = "/v1/consents/organizations/{consentId}/financial-accounts/{accountId}/transactions"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filters": filters?.encodeToJSON(),
            "fromDateTimeUtc": fromDateTimeUtc?.encodeToJSON(),
            "toDateTimeUtc": toDateTimeUtc?.encodeToJSON(),
            "pageNo": pageNo?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrganizationFinancialTransactionsDtoPaginatedList>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all organization consent details by consent id.
     
     - parameter consentId: (path) Consent id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOrganizationConsentDetailsById(consentId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DataConsentDetailsDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getOrganizationConsentDetailsByIdWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all organization consent details by consent id.
     - GET /v1/consents/organizations/{consentId}
     - parameter consentId: (path) Consent id. 
     - returns: RequestBuilder<DataConsentDetailsDto> 
     */
    open class func getOrganizationConsentDetailsByIdWithRequestBuilder(consentId: UUID) -> RequestBuilder<DataConsentDetailsDto> {
        var localVariablePath = "/v1/consents/organizations/{consentId}"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataConsentDetailsDto>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get organization consent document based on document id.
     
     - parameter consentId: (path) Consent id. 
     - parameter documentId: (path) Document Id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOrganizationConsentedDocumentById(consentId: UUID, documentId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: OrganizationDocumentDetails?, _ error: Error?) -> Void)) -> RequestTask {
        return getOrganizationConsentedDocumentByIdWithRequestBuilder(consentId: consentId, documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get organization consent document based on document id.
     - GET /v1/consents/organizations/{consentId}/documents/{documentId}
     - parameter consentId: (path) Consent id. 
     - parameter documentId: (path) Document Id. 
     - returns: RequestBuilder<OrganizationDocumentDetails> 
     */
    open class func getOrganizationConsentedDocumentByIdWithRequestBuilder(consentId: UUID, documentId: UUID) -> RequestBuilder<OrganizationDocumentDetails> {
        var localVariablePath = "/v1/consents/organizations/{consentId}/documents/{documentId}"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consentId}", with: consentIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrganizationDocumentDetails>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
