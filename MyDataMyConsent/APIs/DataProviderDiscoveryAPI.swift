//
// DataProviderDiscoveryAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DataProviderDiscoveryAPI {

    /**
     Get a Data Provider details based on provider id.
     
     - parameter providerId: (path) Provider id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDataProviderById(providerId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DataProvider?, _ error: Error?) -> Void)) -> RequestTask {
        return getDataProviderByIdWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a Data Provider details based on provider id.
     - GET /v1/data-providers/{providerId}
     - parameter providerId: (path) Provider id. 
     - returns: RequestBuilder<DataProvider> 
     */
    open class func getDataProviderByIdWithRequestBuilder(providerId: String) -> RequestBuilder<DataProvider> {
        var localVariablePath = "/v1/data-providers/{providerId}"
        let providerIdPreEscape = "\(APIHelper.mapValueToPathItem(providerId))"
        let providerIdPostEscape = providerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{providerId}", with: providerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataProvider>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Discover all data providers in My Data My Consent by country and filters.
     
     - parameter accountType: (query) Account type. (optional)
     - parameter documentType: (query) Document type. (optional)
     - parameter organizationCategory: (query) Organization category. (optional)
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - parameter country: (query) ISO2 Country code. (optional, default to "IN")
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDataProviders(accountType: String? = nil, documentType: String? = nil, organizationCategory: String? = nil, pageNo: Int? = nil, pageSize: Int? = nil, country: String? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DataProviderPaginatedList?, _ error: Error?) -> Void)) -> RequestTask {
        return getDataProvidersWithRequestBuilder(accountType: accountType, documentType: documentType, organizationCategory: organizationCategory, pageNo: pageNo, pageSize: pageSize, country: country).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Discover all data providers in My Data My Consent by country and filters.
     - GET /v1/data-providers
     - parameter accountType: (query) Account type. (optional)
     - parameter documentType: (query) Document type. (optional)
     - parameter organizationCategory: (query) Organization category. (optional)
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - parameter country: (query) ISO2 Country code. (optional, default to "IN")
     - returns: RequestBuilder<DataProviderPaginatedList> 
     */
    open class func getDataProvidersWithRequestBuilder(accountType: String? = nil, documentType: String? = nil, organizationCategory: String? = nil, pageNo: Int? = nil, pageSize: Int? = nil, country: String? = nil) -> RequestBuilder<DataProviderPaginatedList> {
        let localVariablePath = "/v1/data-providers"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "accountType": accountType?.encodeToJSON(),
            "documentType": documentType?.encodeToJSON(),
            "organizationCategory": organizationCategory?.encodeToJSON(),
            "pageNo": pageNo?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON(),
            "country": country?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataProviderPaginatedList>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
