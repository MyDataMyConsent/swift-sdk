//
// IndividualsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class IndividualsAPI {

    /**
     Digilocker compatible endpoint to issue document.
     
     - parameter pushUriRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func issuerIssuedoc1XmlPost(pushUriRequest: PushUriRequest, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: PushUriResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return issuerIssuedoc1XmlPostWithRequestBuilder(pushUriRequest: pushUriRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Digilocker compatible endpoint to issue document.
     - POST /issuer/issuedoc/1/xml
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter pushUriRequest: (body)  
     - returns: RequestBuilder<PushUriResponse> 
     */
    open class func issuerIssuedoc1XmlPostWithRequestBuilder(pushUriRequest: PushUriRequest) -> RequestBuilder<PushUriResponse> {
        let localVariablePath = "/issuer/issuedoc/1/xml"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: pushUriRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PushUriResponse>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all consent requests sent to Individuals.
     
     - parameter status: (query)  (optional)
     - parameter fromDateTime: (query)  (optional)
     - parameter toDateTime: (query)  (optional)
     - parameter pageNo: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentRequestsGet(status: DataConsentStatus? = nil, fromDateTime: Date? = nil, toDateTime: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedListOfIndividualConsentRequestDetailss?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentRequestsGetWithRequestBuilder(status: status, fromDateTime: fromDateTime, toDateTime: toDateTime, pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all consent requests sent to Individuals.
     - GET /v1/individuals/consent-requests
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter status: (query)  (optional)
     - parameter fromDateTime: (query)  (optional)
     - parameter toDateTime: (query)  (optional)
     - parameter pageNo: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - returns: RequestBuilder<PaginatedListOfIndividualConsentRequestDetailss> 
     */
    open class func v1IndividualsConsentRequestsGetWithRequestBuilder(status: DataConsentStatus? = nil, fromDateTime: Date? = nil, toDateTime: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<PaginatedListOfIndividualConsentRequestDetailss> {
        let localVariablePath = "/v1/individuals/consent-requests"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "from_date_time": (wrappedValue: fromDateTime?.encodeToJSON(), isExplode: true),
            "to_date_time": (wrappedValue: toDateTime?.encodeToJSON(), isExplode: true),
            "page_no": (wrappedValue: pageNo?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedListOfIndividualConsentRequestDetailss>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create individual consent request.
     
     - parameter createConsentRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentRequestsPost(createConsentRequest: CreateConsentRequest, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: IndividualConsentRequestDetails?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentRequestsPostWithRequestBuilder(createConsentRequest: createConsentRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create individual consent request.
     - POST /v1/individuals/consent-requests
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter createConsentRequest: (body)  
     - returns: RequestBuilder<IndividualConsentRequestDetails> 
     */
    open class func v1IndividualsConsentRequestsPostWithRequestBuilder(createConsentRequest: CreateConsentRequest) -> RequestBuilder<IndividualConsentRequestDetails> {
        let localVariablePath = "/v1/individuals/consent-requests"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createConsentRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IndividualConsentRequestDetails>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Cancel the Individual data request by id.
     
     - parameter requestId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentRequestsRequestIdCancelPut(requestId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentRequestsRequestIdCancelPutWithRequestBuilder(requestId: requestId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel the Individual data request by id.
     - PUT /v1/individuals/consent-requests/{request_id}/cancel
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter requestId: (path)  
     - returns: RequestBuilder<Bool> 
     */
    open class func v1IndividualsConsentRequestsRequestIdCancelPutWithRequestBuilder(requestId: String) -> RequestBuilder<Bool> {
        var localVariablePath = "/v1/individuals/consent-requests/{request_id}/cancel"
        let requestIdPreEscape = "\(APIHelper.mapValueToPathItem(requestId))"
        let requestIdPostEscape = requestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{request_id}", with: requestIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Individual data consent request by id.
     
     - parameter requestId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentRequestsRequestIdGet(requestId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: ConsentRequest?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentRequestsRequestIdGetWithRequestBuilder(requestId: requestId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Individual data consent request by id.
     - GET /v1/individuals/consent-requests/{request_id}
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter requestId: (path)  
     - returns: RequestBuilder<ConsentRequest> 
     */
    open class func v1IndividualsConsentRequestsRequestIdGetWithRequestBuilder(requestId: String) -> RequestBuilder<ConsentRequest> {
        var localVariablePath = "/v1/individuals/consent-requests/{request_id}"
        let requestIdPreEscape = "\(APIHelper.mapValueToPathItem(requestId))"
        let requestIdPostEscape = requestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{request_id}", with: requestIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentRequest>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get the paginated list of individual consent templates.
     
     - parameter pageNo: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentTemplatesGet(pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedListOfConsentRequestTemplates?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentTemplatesGetWithRequestBuilder(pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the paginated list of individual consent templates.
     - GET /v1/individuals/consent-templates
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter pageNo: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - returns: RequestBuilder<PaginatedListOfConsentRequestTemplates> 
     */
    open class func v1IndividualsConsentTemplatesGetWithRequestBuilder(pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<PaginatedListOfConsentRequestTemplates> {
        let localVariablePath = "/v1/individuals/consent-templates"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page_no": (wrappedValue: pageNo?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedListOfConsentRequestTemplates>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Individual consent template details by consent id.
     
     - parameter templateId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentTemplatesTemplateIdGet(templateId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: IndividualConsentRequestTemplateDetails?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentTemplatesTemplateIdGetWithRequestBuilder(templateId: templateId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Individual consent template details by consent id.
     - GET /v1/individuals/consent-templates/{template_id}
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter templateId: (path)  
     - returns: RequestBuilder<IndividualConsentRequestTemplateDetails> 
     */
    open class func v1IndividualsConsentTemplatesTemplateIdGetWithRequestBuilder(templateId: String) -> RequestBuilder<IndividualConsentRequestTemplateDetails> {
        var localVariablePath = "/v1/individuals/consent-templates/{template_id}"
        let templateIdPreEscape = "\(APIHelper.mapValueToPathItem(templateId))"
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{template_id}", with: templateIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IndividualConsentRequestTemplateDetails>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Download Individual consented document by document id.
     
     - parameter consentId: (path)  
     - parameter documentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId: String, documentId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGetWithRequestBuilder(consentId: consentId, documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download Individual consented document by document id.
     - GET /v1/individuals/consents/{consent_id}/documents/{document_id}/download
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - responseHeaders: [CONTENT-DISPOSITION(String)]
     - parameter consentId: (path)  
     - parameter documentId: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func v1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGetWithRequestBuilder(consentId: String, documentId: String) -> RequestBuilder<URL> {
        var localVariablePath = "/v1/individuals/consents/{consent_id}/documents/{document_id}/download"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consent_id}", with: consentIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Individual consented document by document id.
     
     - parameter consentId: (path)  
     - parameter documentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentsConsentIdDocumentsDocumentIdGet(consentId: String, documentId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: ConsentedDocument?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentsConsentIdDocumentsDocumentIdGetWithRequestBuilder(consentId: consentId, documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Individual consented document by document id.
     - GET /v1/individuals/consents/{consent_id}/documents/{document_id}
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter consentId: (path)  
     - parameter documentId: (path)  
     - returns: RequestBuilder<ConsentedDocument> 
     */
    open class func v1IndividualsConsentsConsentIdDocumentsDocumentIdGetWithRequestBuilder(consentId: String, documentId: String) -> RequestBuilder<ConsentedDocument> {
        var localVariablePath = "/v1/individuals/consents/{consent_id}/documents/{document_id}"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consent_id}", with: consentIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentedDocument>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Individual consented document by consent id.
     
     - parameter consentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentsConsentIdDocumentsGet(consentId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: [ConsentedDocument]?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentsConsentIdDocumentsGetWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Individual consented document by consent id.
     - GET /v1/individuals/consents/{consent_id}/documents
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter consentId: (path)  
     - returns: RequestBuilder<[ConsentedDocument]> 
     */
    open class func v1IndividualsConsentsConsentIdDocumentsGetWithRequestBuilder(consentId: String) -> RequestBuilder<[ConsentedDocument]> {
        var localVariablePath = "/v1/individuals/consents/{consent_id}/documents"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consent_id}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ConsentedDocument]>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get individual consented financial account details.
     
     - parameter consentId: (path)  
     - parameter accountId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet(consentId: String, accountId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: FinancialAccount?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentsConsentIdFinancialAccountsAccountIdGetWithRequestBuilder(consentId: consentId, accountId: accountId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get individual consented financial account details.
     - GET /v1/individuals/consents/{consent_id}/financial-accounts/{account_id}
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter consentId: (path)  
     - parameter accountId: (path)  
     - returns: RequestBuilder<FinancialAccount> 
     */
    open class func v1IndividualsConsentsConsentIdFinancialAccountsAccountIdGetWithRequestBuilder(consentId: String, accountId: String) -> RequestBuilder<FinancialAccount> {
        var localVariablePath = "/v1/individuals/consents/{consent_id}/financial-accounts/{account_id}"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consent_id}", with: consentIdPostEscape, options: .literal, range: nil)
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FinancialAccount>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get individual consented financial account transactions.
     
     - parameter consentId: (path)  
     - parameter accountId: (path)  
     - parameter filters: (query)  (optional)
     - parameter fromDateTime: (query)  (optional)
     - parameter toDateTime: (query)  (optional)
     - parameter pageNo: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId: String, accountId: String, filters: String? = nil, fromDateTime: String? = nil, toDateTime: String? = nil, pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedListOfFinancialAccountTransactions?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGetWithRequestBuilder(consentId: consentId, accountId: accountId, filters: filters, fromDateTime: fromDateTime, toDateTime: toDateTime, pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get individual consented financial account transactions.
     - GET /v1/individuals/consents/{consent_id}/financial-accounts/{account_id}/transactions
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter consentId: (path)  
     - parameter accountId: (path)  
     - parameter filters: (query)  (optional)
     - parameter fromDateTime: (query)  (optional)
     - parameter toDateTime: (query)  (optional)
     - parameter pageNo: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - returns: RequestBuilder<PaginatedListOfFinancialAccountTransactions> 
     */
    open class func v1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGetWithRequestBuilder(consentId: String, accountId: String, filters: String? = nil, fromDateTime: String? = nil, toDateTime: String? = nil, pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<PaginatedListOfFinancialAccountTransactions> {
        var localVariablePath = "/v1/individuals/consents/{consent_id}/financial-accounts/{account_id}/transactions"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consent_id}", with: consentIdPostEscape, options: .literal, range: nil)
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "_filters": (wrappedValue: filters?.encodeToJSON(), isExplode: true),
            "_from_date_time": (wrappedValue: fromDateTime?.encodeToJSON(), isExplode: true),
            "_to_date_time": (wrappedValue: toDateTime?.encodeToJSON(), isExplode: true),
            "_page_no": (wrappedValue: pageNo?.encodeToJSON(), isExplode: true),
            "_page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedListOfFinancialAccountTransactions>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all individual consented financial accounts.
     
     - parameter consentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentsConsentIdFinancialAccountsGet(consentId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: [FinancialAccount]?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentsConsentIdFinancialAccountsGetWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all individual consented financial accounts.
     - GET /v1/individuals/consents/{consent_id}/financial-accounts
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter consentId: (path)  
     - returns: RequestBuilder<[FinancialAccount]> 
     */
    open class func v1IndividualsConsentsConsentIdFinancialAccountsGetWithRequestBuilder(consentId: String) -> RequestBuilder<[FinancialAccount]> {
        var localVariablePath = "/v1/individuals/consents/{consent_id}/financial-accounts"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consent_id}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FinancialAccount]>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Individuals consent details by consent id.
     
     - parameter consentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentsConsentIdGet(consentId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: ConsentDetails?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentsConsentIdGetWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Individuals consent details by consent id.
     - GET /v1/individuals/consents/{consent_id}
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter consentId: (path)  
     - returns: RequestBuilder<ConsentDetails> 
     */
    open class func v1IndividualsConsentsConsentIdGetWithRequestBuilder(consentId: String) -> RequestBuilder<ConsentDetails> {
        var localVariablePath = "/v1/individuals/consents/{consent_id}"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consent_id}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentDetails>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Individual consented Health Records by consent id.
     
     - parameter consentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentsConsentIdHealthFhirBundleGet(consentId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: FhirBundleany?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentsConsentIdHealthFhirBundleGetWithRequestBuilder(consentId: consentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Individual consented Health Records by consent id.
     - GET /v1/individuals/consents/{consent_id}/health/fhir/bundle
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter consentId: (path)  
     - returns: RequestBuilder<FhirBundleany> 
     */
    open class func v1IndividualsConsentsConsentIdHealthFhirBundleGetWithRequestBuilder(consentId: String) -> RequestBuilder<FhirBundleany> {
        var localVariablePath = "/v1/individuals/consents/{consent_id}/health/fhir/bundle"
        let consentIdPreEscape = "\(APIHelper.mapValueToPathItem(consentId))"
        let consentIdPostEscape = consentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{consent_id}", with: consentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FhirBundleany>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get the paginated list of Individual consents.
     
     - parameter status: (query)  (optional)
     - parameter fromDateTime: (query)  (optional)
     - parameter toDateTime: (query)  (optional)
     - parameter pageNo: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsConsentsGet(status: DataConsentStatus? = nil, fromDateTime: Date? = nil, toDateTime: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedListOfConsents?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsConsentsGetWithRequestBuilder(status: status, fromDateTime: fromDateTime, toDateTime: toDateTime, pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the paginated list of Individual consents.
     - GET /v1/individuals/consents
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter status: (query)  (optional)
     - parameter fromDateTime: (query)  (optional)
     - parameter toDateTime: (query)  (optional)
     - parameter pageNo: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - returns: RequestBuilder<PaginatedListOfConsents> 
     */
    open class func v1IndividualsConsentsGetWithRequestBuilder(status: DataConsentStatus? = nil, fromDateTime: Date? = nil, toDateTime: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<PaginatedListOfConsents> {
        let localVariablePath = "/v1/individuals/consents"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "from_date_time": (wrappedValue: fromDateTime?.encodeToJSON(), isExplode: true),
            "to_date_time": (wrappedValue: toDateTime?.encodeToJSON(), isExplode: true),
            "page_no": (wrappedValue: pageNo?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedListOfConsents>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Upload a document for issuance request of individual.
     
     - parameter issueRequestId: (path)  
     - parameter file: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsDocumentsIssueIssueRequestIdUploadPost(issueRequestId: String, file: URL, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: UploadDocumentResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsDocumentsIssueIssueRequestIdUploadPostWithRequestBuilder(issueRequestId: issueRequestId, file: file).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upload a document for issuance request of individual.
     - POST /v1/individuals/documents/issue/{issue_request_id}/upload
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter issueRequestId: (path)  
     - parameter file: (form)  
     - returns: RequestBuilder<UploadDocumentResponse> 
     */
    open class func v1IndividualsDocumentsIssueIssueRequestIdUploadPostWithRequestBuilder(issueRequestId: String, file: URL) -> RequestBuilder<UploadDocumentResponse> {
        var localVariablePath = "/v1/individuals/documents/issue/{issue_request_id}/upload"
        let issueRequestIdPreEscape = "\(APIHelper.mapValueToPathItem(issueRequestId))"
        let issueRequestIdPostEscape = issueRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{issue_request_id}", with: issueRequestIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UploadDocumentResponse>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Issue a new document to an individual user.
     
     - parameter documentIssueRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsDocumentsIssuePost(documentIssueRequest: DocumentIssueRequest, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DocumentIssueRequestDetails?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsDocumentsIssuePostWithRequestBuilder(documentIssueRequest: documentIssueRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issue a new document to an individual user.
     - POST /v1/individuals/documents/issue
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter documentIssueRequest: (body)  
     - returns: RequestBuilder<DocumentIssueRequestDetails> 
     */
    open class func v1IndividualsDocumentsIssuePostWithRequestBuilder(documentIssueRequest: DocumentIssueRequest) -> RequestBuilder<DocumentIssueRequestDetails> {
        let localVariablePath = "/v1/individuals/documents/issue"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: documentIssueRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentIssueRequestDetails>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get issued document.
     
     - parameter documentId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsDocumentsIssuedDocumentIdGet(documentId: String, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: IssuedDocument?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsDocumentsIssuedDocumentIdGetWithRequestBuilder(documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get issued document.
     - GET /v1/individuals/documents/issued/{document_id}
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter documentId: (path)  
     - returns: RequestBuilder<IssuedDocument> 
     */
    open class func v1IndividualsDocumentsIssuedDocumentIdGetWithRequestBuilder(documentId: String) -> RequestBuilder<IssuedDocument> {
        var localVariablePath = "/v1/individuals/documents/issued/{document_id}"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IssuedDocument>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get paginated list of issued documents of given document type.
     
     - parameter documentTypeId: (query)  
     - parameter fromDateTime: (query)  (optional)
     - parameter toDateTime: (query)  (optional)
     - parameter pageNo: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsDocumentsIssuedGet(documentTypeId: String, fromDateTime: Date? = nil, toDateTime: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedListOfIssuedDocuments?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsDocumentsIssuedGetWithRequestBuilder(documentTypeId: documentTypeId, fromDateTime: fromDateTime, toDateTime: toDateTime, pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get paginated list of issued documents of given document type.
     - GET /v1/individuals/documents/issued
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter documentTypeId: (query)  
     - parameter fromDateTime: (query)  (optional)
     - parameter toDateTime: (query)  (optional)
     - parameter pageNo: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - returns: RequestBuilder<PaginatedListOfIssuedDocuments> 
     */
    open class func v1IndividualsDocumentsIssuedGetWithRequestBuilder(documentTypeId: String, fromDateTime: Date? = nil, toDateTime: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<PaginatedListOfIssuedDocuments> {
        let localVariablePath = "/v1/individuals/documents/issued"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "document_type_id": (wrappedValue: documentTypeId.encodeToJSON(), isExplode: true),
            "from_date_time": (wrappedValue: fromDateTime?.encodeToJSON(), isExplode: true),
            "to_date_time": (wrappedValue: toDateTime?.encodeToJSON(), isExplode: true),
            "page_no": (wrappedValue: pageNo?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedListOfIssuedDocuments>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get paginated list of registered document types.
     
     - parameter pageNo: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1IndividualsDocumentsTypesGet(pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: PaginatedListOfDocumentTypes?, _ error: Error?) -> Void)) -> RequestTask {
        return v1IndividualsDocumentsTypesGetWithRequestBuilder(pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get paginated list of registered document types.
     - GET /v1/individuals/documents/types
     - OAuth:
       - type: oauth2
       - name: OAuth2ClientCredentials
     - parameter pageNo: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - returns: RequestBuilder<PaginatedListOfDocumentTypes> 
     */
    open class func v1IndividualsDocumentsTypesGetWithRequestBuilder(pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<PaginatedListOfDocumentTypes> {
        let localVariablePath = "/v1/individuals/documents/types"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page_no": (wrappedValue: pageNo?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedListOfDocumentTypes>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
