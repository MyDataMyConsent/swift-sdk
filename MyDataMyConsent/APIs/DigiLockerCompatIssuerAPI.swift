//
// DigiLockerCompatIssuerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DigiLockerCompatIssuerAPI {

    /**
     Digilocker Compatible endpoint to issue document.
     
     - parameter pushUriRequest: (body) Push uri request MyDataMyConsent.Models.DigiLocker.PushUriRequest. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func digilockerCompatIssueDocument(pushUriRequest: PushUriRequest? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: PushUriResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return digilockerCompatIssueDocumentWithRequestBuilder(pushUriRequest: pushUriRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Digilocker Compatible endpoint to issue document.
     - POST /issuer/issuedoc/1/xml
     - parameter pushUriRequest: (body) Push uri request MyDataMyConsent.Models.DigiLocker.PushUriRequest. (optional)
     - returns: RequestBuilder<PushUriResponse> 
     */
    open class func digilockerCompatIssueDocumentWithRequestBuilder(pushUriRequest: PushUriRequest? = nil) -> RequestBuilder<PushUriResponse> {
        let localVariablePath = "/issuer/issuedoc/1/xml"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: pushUriRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PushUriResponse>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
