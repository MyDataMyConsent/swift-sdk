//
// DocumentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DocumentsAPI {

    /**
     Get issued document.
     
     - parameter documentId: (path) Document id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getIssuedDocumentById(documentId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: IssuedDocument?, _ error: Error?) -> Void)) -> RequestTask {
        return getIssuedDocumentByIdWithRequestBuilder(documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get issued document.
     - GET /v1/documents/issued/{documentId}
     - parameter documentId: (path) Document id. 
     - returns: RequestBuilder<IssuedDocument> 
     */
    open class func getIssuedDocumentByIdWithRequestBuilder(documentId: UUID) -> RequestBuilder<IssuedDocument> {
        var localVariablePath = "/v1/documents/issued/{documentId}"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IssuedDocument>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get issued documents.
     
     - parameter documentTypeId: (query)  (optional)
     - parameter fromDateTime: (query)  (optional)
     - parameter toDateTime: (query)  (optional)
     - parameter pageSize: (query)  (optional, default to 25)
     - parameter pageNo: (query)  (optional, default to 1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getIssuedDocuments(documentTypeId: UUID? = nil, fromDateTime: Date? = nil, toDateTime: Date? = nil, pageSize: Int? = nil, pageNo: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: IssuedDocumentPaginatedList?, _ error: Error?) -> Void)) -> RequestTask {
        return getIssuedDocumentsWithRequestBuilder(documentTypeId: documentTypeId, fromDateTime: fromDateTime, toDateTime: toDateTime, pageSize: pageSize, pageNo: pageNo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get issued documents.
     - GET /v1/documents/issued
     - parameter documentTypeId: (query)  (optional)
     - parameter fromDateTime: (query)  (optional)
     - parameter toDateTime: (query)  (optional)
     - parameter pageSize: (query)  (optional, default to 25)
     - parameter pageNo: (query)  (optional, default to 1)
     - returns: RequestBuilder<IssuedDocumentPaginatedList> 
     */
    open class func getIssuedDocumentsWithRequestBuilder(documentTypeId: UUID? = nil, fromDateTime: Date? = nil, toDateTime: Date? = nil, pageSize: Int? = nil, pageNo: Int? = nil) -> RequestBuilder<IssuedDocumentPaginatedList> {
        let localVariablePath = "/v1/documents/issued"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "documentTypeId": documentTypeId?.encodeToJSON(),
            "fromDateTime": fromDateTime?.encodeToJSON(),
            "toDateTime": toDateTime?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON(),
            "pageNo": pageNo?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IssuedDocumentPaginatedList>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get registered document types.
     
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRegisteredDocumentTypes(pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DocumentTypePaginatedList?, _ error: Error?) -> Void)) -> RequestTask {
        return getRegisteredDocumentTypesWithRequestBuilder(pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get registered document types.
     - GET /v1/documents/types
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - returns: RequestBuilder<DocumentTypePaginatedList> 
     */
    open class func getRegisteredDocumentTypesWithRequestBuilder(pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<DocumentTypePaginatedList> {
        let localVariablePath = "/v1/documents/types"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNo": pageNo?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentTypePaginatedList>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Issue a new document.
     
     - parameter documentIssueRequest: (body) Document issue request MyDataMyConsent.Models.Documents.DocumentIssueRequest. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func issueDocument(documentIssueRequest: DocumentIssueRequest, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: IssuedDocument?, _ error: Error?) -> Void)) -> RequestTask {
        return issueDocumentWithRequestBuilder(documentIssueRequest: documentIssueRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issue a new document.
     - POST /v1/documents/issue
     - parameter documentIssueRequest: (body) Document issue request MyDataMyConsent.Models.Documents.DocumentIssueRequest. 
     - returns: RequestBuilder<IssuedDocument> 
     */
    open class func issueDocumentWithRequestBuilder(documentIssueRequest: DocumentIssueRequest) -> RequestBuilder<IssuedDocument> {
        let localVariablePath = "/v1/documents/issue"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: documentIssueRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IssuedDocument>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
