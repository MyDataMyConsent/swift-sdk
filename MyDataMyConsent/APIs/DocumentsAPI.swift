//
// DocumentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DocumentsAPI {

    /**
     Get issued document.
     
     - parameter documentId: (path) Document id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getIssuedDocumentById(documentId: UUID, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: IssuedDocument?, _ error: Error?) -> Void)) -> RequestTask {
        return getIssuedDocumentByIdWithRequestBuilder(documentId: documentId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get issued document.
     - GET /v1/documents/issued/{documentId}
     - parameter documentId: (path) Document id. 
     - returns: RequestBuilder<IssuedDocument> 
     */
    open class func getIssuedDocumentByIdWithRequestBuilder(documentId: UUID) -> RequestBuilder<IssuedDocument> {
        var localVariablePath = "/v1/documents/issued/{documentId}"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IssuedDocument>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get paginated list of issued documents of given document type.
     
     - parameter documentTypeId: (path) Document type id. 
     - parameter fromDateTime: (query) From DateTime in UTC timezone. (optional)
     - parameter toDateTime: (query) To DateTime in UTC timezone. (optional)
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getIssuedDocuments(documentTypeId: UUID, fromDateTime: Date? = nil, toDateTime: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: IssuedDocumentPaginatedList?, _ error: Error?) -> Void)) -> RequestTask {
        return getIssuedDocumentsWithRequestBuilder(documentTypeId: documentTypeId, fromDateTime: fromDateTime, toDateTime: toDateTime, pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get paginated list of issued documents of given document type.
     - GET /v1/documents/issued/{documentTypeId}
     - parameter documentTypeId: (path) Document type id. 
     - parameter fromDateTime: (query) From DateTime in UTC timezone. (optional)
     - parameter toDateTime: (query) To DateTime in UTC timezone. (optional)
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - returns: RequestBuilder<IssuedDocumentPaginatedList> 
     */
    open class func getIssuedDocumentsWithRequestBuilder(documentTypeId: UUID, fromDateTime: Date? = nil, toDateTime: Date? = nil, pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<IssuedDocumentPaginatedList> {
        var localVariablePath = "/v1/documents/issued/{documentTypeId}"
        let documentTypeIdPreEscape = "\(APIHelper.mapValueToPathItem(documentTypeId))"
        let documentTypeIdPostEscape = documentTypeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{documentTypeId}", with: documentTypeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fromDateTime": fromDateTime?.encodeToJSON(),
            "toDateTime": toDateTime?.encodeToJSON(),
            "pageNo": pageNo?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IssuedDocumentPaginatedList>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get paginated list of registered document types.
     
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRegisteredDocumentTypes(pageNo: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DocumentTypePaginatedList?, _ error: Error?) -> Void)) -> RequestTask {
        return getRegisteredDocumentTypesWithRequestBuilder(pageNo: pageNo, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get paginated list of registered document types.
     - GET /v1/documents/types
     - parameter pageNo: (query) Page number. (optional, default to 1)
     - parameter pageSize: (query) Number of items to return. (optional, default to 25)
     - returns: RequestBuilder<DocumentTypePaginatedList> 
     */
    open class func getRegisteredDocumentTypesWithRequestBuilder(pageNo: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<DocumentTypePaginatedList> {
        let localVariablePath = "/v1/documents/types"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNo": pageNo?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentTypePaginatedList>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Issue a new document to an individual user.
     
     - parameter documentIssueRequest: (body) Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func issueDocumentToIndividual(documentIssueRequest: DocumentIssueRequest, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DocumentIssueRequestDetails?, _ error: Error?) -> Void)) -> RequestTask {
        return issueDocumentToIndividualWithRequestBuilder(documentIssueRequest: documentIssueRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issue a new document to an individual user.
     - POST /v1/documents/issue/individual
     - parameter documentIssueRequest: (body) Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest. 
     - returns: RequestBuilder<DocumentIssueRequestDetails> 
     */
    open class func issueDocumentToIndividualWithRequestBuilder(documentIssueRequest: DocumentIssueRequest) -> RequestBuilder<DocumentIssueRequestDetails> {
        let localVariablePath = "/v1/documents/issue/individual"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: documentIssueRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentIssueRequestDetails>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Issue a new document to an organization.
     
     - parameter documentIssueRequest: (body) Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func issueDocumentToOrganization(documentIssueRequest: DocumentIssueRequest, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: DocumentIssueRequestDetails?, _ error: Error?) -> Void)) -> RequestTask {
        return issueDocumentToOrganizationWithRequestBuilder(documentIssueRequest: documentIssueRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issue a new document to an organization.
     - POST /v1/documents/issue/organization
     - parameter documentIssueRequest: (body) Document issue request MyDataMyConsent.DeveloperApi.Models.DocumentIssueRequest. 
     - returns: RequestBuilder<DocumentIssueRequestDetails> 
     */
    open class func issueDocumentToOrganizationWithRequestBuilder(documentIssueRequest: DocumentIssueRequest) -> RequestBuilder<DocumentIssueRequestDetails> {
        let localVariablePath = "/v1/documents/issue/organization"
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: documentIssueRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DocumentIssueRequestDetails>.Type = MyDataMyConsentAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Upload a document for issuance request of individual.
     
     - parameter issueRequestId: (path) Document issue request id. 
     - parameter formFile: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func uploadDocumentForIndividual(issueRequestId: UUID, formFile: URL, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return uploadDocumentForIndividualWithRequestBuilder(issueRequestId: issueRequestId, formFile: formFile).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upload a document for issuance request of individual.
     - POST /v1/documents/issue/individual/upload/{issueRequestId}
     - parameter issueRequestId: (path) Document issue request id. 
     - parameter formFile: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func uploadDocumentForIndividualWithRequestBuilder(issueRequestId: UUID, formFile: URL) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/documents/issue/individual/upload/{issueRequestId}"
        let issueRequestIdPreEscape = "\(APIHelper.mapValueToPathItem(issueRequestId))"
        let issueRequestIdPostEscape = issueRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{issueRequestId}", with: issueRequestIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formFile": formFile.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = MyDataMyConsentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Upload a document for issuance request of organization.
     
     - parameter issueRequestId: (path) Document issue request id System.Guid. 
     - parameter formFile: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func uploadDocumentForOrganization(issueRequestId: UUID, formFile: URL, apiResponseQueue: DispatchQueue = MyDataMyConsentAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return uploadDocumentForOrganizationWithRequestBuilder(issueRequestId: issueRequestId, formFile: formFile).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upload a document for issuance request of organization.
     - POST /v1/documents/issue/organization/upload/{issueRequestId}
     - parameter issueRequestId: (path) Document issue request id System.Guid. 
     - parameter formFile: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func uploadDocumentForOrganizationWithRequestBuilder(issueRequestId: UUID, formFile: URL) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/documents/issue/organization/upload/{issueRequestId}"
        let issueRequestIdPreEscape = "\(APIHelper.mapValueToPathItem(issueRequestId))"
        let issueRequestIdPostEscape = issueRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{issueRequestId}", with: issueRequestIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MyDataMyConsentAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "formFile": formFile.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = MyDataMyConsentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
