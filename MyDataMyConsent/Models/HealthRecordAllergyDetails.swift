//
// HealthRecordAllergyDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct HealthRecordAllergyDetails: Codable, JSONEncodable, Hashable {

    public var type: String
    public var id: String
    public var name: CodeableConcept?
    public var category: [String]
    public var levelStatus: String?
    public var status: CodeableConcept?
    public var clinicalStatus: CodeableConcept?
    public var reactions: [AllergyIntoleranceReaction]
    public var recordedAtUtc: Date?

    public init(type: String, id: String, name: CodeableConcept? = nil, category: [String], levelStatus: String? = nil, status: CodeableConcept? = nil, clinicalStatus: CodeableConcept? = nil, reactions: [AllergyIntoleranceReaction], recordedAtUtc: Date? = nil) {
        self.type = type
        self.id = id
        self.name = name
        self.category = category
        self.levelStatus = levelStatus
        self.status = status
        self.clinicalStatus = clinicalStatus
        self.reactions = reactions
        self.recordedAtUtc = recordedAtUtc
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case id
        case name
        case category
        case levelStatus = "level_status"
        case status
        case clinicalStatus = "clinical_status"
        case reactions
        case recordedAtUtc = "recorded_at_utc"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(category, forKey: .category)
        try container.encodeIfPresent(levelStatus, forKey: .levelStatus)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(clinicalStatus, forKey: .clinicalStatus)
        try container.encode(reactions, forKey: .reactions)
        try container.encodeIfPresent(recordedAtUtc, forKey: .recordedAtUtc)
    }
}

