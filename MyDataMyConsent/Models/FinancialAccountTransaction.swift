//
// FinancialAccountTransaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FinancialAccountTransaction: Codable, JSONEncodable, Hashable {

    public var type: String
    public var id: String
    public var txnType: CreditCardTransactionType
    public var txnDate: Date
    public var amount: String
    public var valueDate: Date
    public var narration: String
    public var statementDate: Date
    public var mcc: String
    public var maskedCardNumber: String
    public var amc: String
    public var registrar: String
    public var schemeCode: String
    public var schemePlan: MutualFundSchemePlan
    public var isin: String
    public var amfiCode: String
    public var fundType: MutualFundFundType
    public var schemeOption: MutualFundSchemeOption
    public var schemeTypes: MutualFundSchemeType
    public var schemeCategory: MutualFundSchemeCategory
    public var ucc: String
    public var closingUnits: String
    public var lienUnits: String
    public var nav: String
    public var navDate: Date
    public var orderDate: Date
    public var executionDate: Date
    public var lockinFlag: String
    public var lockinDays: String
    public var mode: MutualFundHoldingMode

    public init(type: String, id: String, txnType: CreditCardTransactionType, txnDate: Date, amount: String, valueDate: Date, narration: String, statementDate: Date, mcc: String, maskedCardNumber: String, amc: String, registrar: String, schemeCode: String, schemePlan: MutualFundSchemePlan, isin: String, amfiCode: String, fundType: MutualFundFundType, schemeOption: MutualFundSchemeOption, schemeTypes: MutualFundSchemeType, schemeCategory: MutualFundSchemeCategory, ucc: String, closingUnits: String, lienUnits: String, nav: String, navDate: Date, orderDate: Date, executionDate: Date, lockinFlag: String, lockinDays: String, mode: MutualFundHoldingMode) {
        self.type = type
        self.id = id
        self.txnType = txnType
        self.txnDate = txnDate
        self.amount = amount
        self.valueDate = valueDate
        self.narration = narration
        self.statementDate = statementDate
        self.mcc = mcc
        self.maskedCardNumber = maskedCardNumber
        self.amc = amc
        self.registrar = registrar
        self.schemeCode = schemeCode
        self.schemePlan = schemePlan
        self.isin = isin
        self.amfiCode = amfiCode
        self.fundType = fundType
        self.schemeOption = schemeOption
        self.schemeTypes = schemeTypes
        self.schemeCategory = schemeCategory
        self.ucc = ucc
        self.closingUnits = closingUnits
        self.lienUnits = lienUnits
        self.nav = nav
        self.navDate = navDate
        self.orderDate = orderDate
        self.executionDate = executionDate
        self.lockinFlag = lockinFlag
        self.lockinDays = lockinDays
        self.mode = mode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case id
        case txnType = "txn_type"
        case txnDate = "txn_date"
        case amount
        case valueDate = "value_date"
        case narration
        case statementDate = "statement_date"
        case mcc
        case maskedCardNumber = "masked_card_number"
        case amc
        case registrar
        case schemeCode = "scheme_code"
        case schemePlan = "scheme_plan"
        case isin
        case amfiCode = "amfi_code"
        case fundType = "fund_type"
        case schemeOption = "scheme_option"
        case schemeTypes = "scheme_types"
        case schemeCategory = "scheme_category"
        case ucc
        case closingUnits = "closing_units"
        case lienUnits = "lien_units"
        case nav
        case navDate = "nav_date"
        case orderDate = "order_date"
        case executionDate = "execution_date"
        case lockinFlag = "lockin_flag"
        case lockinDays = "lockin_days"
        case mode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(id, forKey: .id)
        try container.encode(txnType, forKey: .txnType)
        try container.encode(txnDate, forKey: .txnDate)
        try container.encode(amount, forKey: .amount)
        try container.encode(valueDate, forKey: .valueDate)
        try container.encode(narration, forKey: .narration)
        try container.encode(statementDate, forKey: .statementDate)
        try container.encode(mcc, forKey: .mcc)
        try container.encode(maskedCardNumber, forKey: .maskedCardNumber)
        try container.encode(amc, forKey: .amc)
        try container.encode(registrar, forKey: .registrar)
        try container.encode(schemeCode, forKey: .schemeCode)
        try container.encode(schemePlan, forKey: .schemePlan)
        try container.encode(isin, forKey: .isin)
        try container.encode(amfiCode, forKey: .amfiCode)
        try container.encode(fundType, forKey: .fundType)
        try container.encode(schemeOption, forKey: .schemeOption)
        try container.encode(schemeTypes, forKey: .schemeTypes)
        try container.encode(schemeCategory, forKey: .schemeCategory)
        try container.encode(ucc, forKey: .ucc)
        try container.encode(closingUnits, forKey: .closingUnits)
        try container.encode(lienUnits, forKey: .lienUnits)
        try container.encode(nav, forKey: .nav)
        try container.encode(navDate, forKey: .navDate)
        try container.encode(orderDate, forKey: .orderDate)
        try container.encode(executionDate, forKey: .executionDate)
        try container.encode(lockinFlag, forKey: .lockinFlag)
        try container.encode(lockinDays, forKey: .lockinDays)
        try container.encode(mode, forKey: .mode)
    }
}

