//
// IndividualConsentRequestTemplateDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** IndividualConsentRequestTemplateDetails :  Individual consent request template details. */
public struct IndividualConsentRequestTemplateDetails: Codable, JSONEncodable, Hashable {

    /** Consent request template id. */
    public var id: String
    /** Consent request template title. */
    public var title: String
    /** Consent request template description. */
    public var description: String
    /** Consent request template purpose. */
    public var purpose: String?
    /** Consent request template short Id. */
    public var shortId: String
    public var status: ConsentRequestTemplateStatus
    public var dataLife: IndividualConsentRequestTemplateDetailsDataLife?
    public var requestLife: IndividualConsentRequestTemplateDetailsRequestLife?
    public var dataFrequency: IndividualConsentRequestTemplateDetailsDataFrequency?
    /** Consent request template identity fields. */
    public var identifiers: [IdentityField]?
    /** Consent request template document fields. */
    public var documents: [DocumentField]?
    /** Consent request template medical record fields. */
    public var medicalRecords: [MedicalRecordField]?
    /** Consent request template financial account fields. */
    public var financialAccounts: [FinancialAccountField]?
    /** Consent request template created by user. */
    public var createdBy: String
    /** Consent request template created datetime in UTC timezone. */
    public var createdAtUtc: Date
    /** Consent request template approval datetime in UTC timezone. */
    public var approvedAtUtc: Date?
    /** Consent request template published datetime in UTC timezone. */
    public var publishedAtUtc: Date?
    /** Consent request template rejection datetime in UTC timezone. */
    public var rejectedAtUtc: Date?
    /** Consent request template rejection reason. */
    public var rejectionReason: String?

    public init(id: String, title: String, description: String, purpose: String? = nil, shortId: String, status: ConsentRequestTemplateStatus, dataLife: IndividualConsentRequestTemplateDetailsDataLife? = nil, requestLife: IndividualConsentRequestTemplateDetailsRequestLife? = nil, dataFrequency: IndividualConsentRequestTemplateDetailsDataFrequency? = nil, identifiers: [IdentityField]? = nil, documents: [DocumentField]? = nil, medicalRecords: [MedicalRecordField]? = nil, financialAccounts: [FinancialAccountField]? = nil, createdBy: String, createdAtUtc: Date, approvedAtUtc: Date? = nil, publishedAtUtc: Date? = nil, rejectedAtUtc: Date? = nil, rejectionReason: String? = nil) {
        self.id = id
        self.title = title
        self.description = description
        self.purpose = purpose
        self.shortId = shortId
        self.status = status
        self.dataLife = dataLife
        self.requestLife = requestLife
        self.dataFrequency = dataFrequency
        self.identifiers = identifiers
        self.documents = documents
        self.medicalRecords = medicalRecords
        self.financialAccounts = financialAccounts
        self.createdBy = createdBy
        self.createdAtUtc = createdAtUtc
        self.approvedAtUtc = approvedAtUtc
        self.publishedAtUtc = publishedAtUtc
        self.rejectedAtUtc = rejectedAtUtc
        self.rejectionReason = rejectionReason
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case description
        case purpose
        case shortId
        case status
        case dataLife
        case requestLife
        case dataFrequency
        case identifiers
        case documents
        case medicalRecords
        case financialAccounts
        case createdBy
        case createdAtUtc
        case approvedAtUtc
        case publishedAtUtc
        case rejectedAtUtc
        case rejectionReason
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(purpose, forKey: .purpose)
        try container.encode(shortId, forKey: .shortId)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(dataLife, forKey: .dataLife)
        try container.encodeIfPresent(requestLife, forKey: .requestLife)
        try container.encodeIfPresent(dataFrequency, forKey: .dataFrequency)
        try container.encodeIfPresent(identifiers, forKey: .identifiers)
        try container.encodeIfPresent(documents, forKey: .documents)
        try container.encodeIfPresent(medicalRecords, forKey: .medicalRecords)
        try container.encodeIfPresent(financialAccounts, forKey: .financialAccounts)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(createdAtUtc, forKey: .createdAtUtc)
        try container.encodeIfPresent(approvedAtUtc, forKey: .approvedAtUtc)
        try container.encodeIfPresent(publishedAtUtc, forKey: .publishedAtUtc)
        try container.encodeIfPresent(rejectedAtUtc, forKey: .rejectedAtUtc)
        try container.encodeIfPresent(rejectionReason, forKey: .rejectionReason)
    }
}

