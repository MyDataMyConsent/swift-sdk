//
// FinancialAccountMutualFund.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FinancialAccountMutualFund: Codable, JSONEncodable, Hashable {

    public var type: String
    public var id: String
    public var name: String
    public var investmentValue: Double
    public var currentValue: Double
    public var currencyCode: String
    public var amc: String?
    public var registrar: String?
    public var fundName: String
    public var isin: String
    public var folioNumber: String
    public var schemeCode: String?
    public var fundType: String?
    public var fundCategory: String?
    public var units: Double
    public var lienUnits: String?
    public var creationDate: Date?
    public var holder: Holder
    public var transactions: Bool

    public init(type: String, id: String, name: String, investmentValue: Double, currentValue: Double, currencyCode: String, amc: String? = nil, registrar: String? = nil, fundName: String, isin: String, folioNumber: String, schemeCode: String? = nil, fundType: String? = nil, fundCategory: String? = nil, units: Double, lienUnits: String? = nil, creationDate: Date? = nil, holder: Holder, transactions: Bool) {
        self.type = type
        self.id = id
        self.name = name
        self.investmentValue = investmentValue
        self.currentValue = currentValue
        self.currencyCode = currencyCode
        self.amc = amc
        self.registrar = registrar
        self.fundName = fundName
        self.isin = isin
        self.folioNumber = folioNumber
        self.schemeCode = schemeCode
        self.fundType = fundType
        self.fundCategory = fundCategory
        self.units = units
        self.lienUnits = lienUnits
        self.creationDate = creationDate
        self.holder = holder
        self.transactions = transactions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case id
        case name
        case investmentValue = "investment_value"
        case currentValue = "current_value"
        case currencyCode = "currency_code"
        case amc
        case registrar
        case fundName = "fund_name"
        case isin
        case folioNumber = "folio_number"
        case schemeCode = "scheme_code"
        case fundType = "fund_type"
        case fundCategory = "fund_category"
        case units
        case lienUnits = "lien_units"
        case creationDate = "creation_date"
        case holder
        case transactions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(investmentValue, forKey: .investmentValue)
        try container.encode(currentValue, forKey: .currentValue)
        try container.encode(currencyCode, forKey: .currencyCode)
        try container.encodeIfPresent(amc, forKey: .amc)
        try container.encodeIfPresent(registrar, forKey: .registrar)
        try container.encode(fundName, forKey: .fundName)
        try container.encode(isin, forKey: .isin)
        try container.encode(folioNumber, forKey: .folioNumber)
        try container.encodeIfPresent(schemeCode, forKey: .schemeCode)
        try container.encodeIfPresent(fundType, forKey: .fundType)
        try container.encodeIfPresent(fundCategory, forKey: .fundCategory)
        try container.encode(units, forKey: .units)
        try container.encodeIfPresent(lienUnits, forKey: .lienUnits)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encode(holder, forKey: .holder)
        try container.encode(transactions, forKey: .transactions)
    }
}

