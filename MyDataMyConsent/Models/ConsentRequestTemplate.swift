//
// ConsentRequestTemplate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ConsentRequestTemplate : Consent request template. */
public struct ConsentRequestTemplate: Codable, JSONEncodable, Hashable {

    /** Consent request template id. */
    public var id: String
    /** Consent request template title. */
    public var title: String
    /** Consent request template description. */
    public var description: String
    /** Consent request template purpose. */
    public var purpose: String?
    /** Consent request template short Id. */
    public var shortId: String
    public var status: ConsentRequestTemplateStatus
    /** Consent request template created by user. */
    public var createdBy: String
    /** Consent request template created datetime in UTC timezone. */
    public var createdAtUtc: Date
    /** Consent request template approval datetime in UTC timezone. */
    public var approvedAtUtc: Date?
    /** Consent request template rejection datetime in UTC timezone. */
    public var rejectedAtUtc: Date?
    /** Consent request template rejection reason. */
    public var rejectionReason: String?

    public init(id: String, title: String, description: String, purpose: String? = nil, shortId: String, status: ConsentRequestTemplateStatus, createdBy: String, createdAtUtc: Date, approvedAtUtc: Date? = nil, rejectedAtUtc: Date? = nil, rejectionReason: String? = nil) {
        self.id = id
        self.title = title
        self.description = description
        self.purpose = purpose
        self.shortId = shortId
        self.status = status
        self.createdBy = createdBy
        self.createdAtUtc = createdAtUtc
        self.approvedAtUtc = approvedAtUtc
        self.rejectedAtUtc = rejectedAtUtc
        self.rejectionReason = rejectionReason
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case description
        case purpose
        case shortId
        case status
        case createdBy
        case createdAtUtc
        case approvedAtUtc
        case rejectedAtUtc
        case rejectionReason
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(purpose, forKey: .purpose)
        try container.encode(shortId, forKey: .shortId)
        try container.encode(status, forKey: .status)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(createdAtUtc, forKey: .createdAtUtc)
        try container.encodeIfPresent(approvedAtUtc, forKey: .approvedAtUtc)
        try container.encodeIfPresent(rejectedAtUtc, forKey: .rejectedAtUtc)
        try container.encodeIfPresent(rejectionReason, forKey: .rejectionReason)
    }
}

