//
// SipPlanInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SipPlanInformation: Codable, JSONEncodable, Hashable {

    public var amc: String?
    public var registrar: String?
    public var scheme: String
    public var isin: String
    public var folioNumber: String?
    public var nav: String?
    public var dividendType: String
    public var creationDate: Date?

    public init(amc: String? = nil, registrar: String? = nil, scheme: String, isin: String, folioNumber: String? = nil, nav: String? = nil, dividendType: String, creationDate: Date? = nil) {
        self.amc = amc
        self.registrar = registrar
        self.scheme = scheme
        self.isin = isin
        self.folioNumber = folioNumber
        self.nav = nav
        self.dividendType = dividendType
        self.creationDate = creationDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amc
        case registrar
        case scheme
        case isin
        case folioNumber = "folio_number"
        case nav
        case dividendType = "dividend_type"
        case creationDate = "creation_date"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(amc, forKey: .amc)
        try container.encodeIfPresent(registrar, forKey: .registrar)
        try container.encode(scheme, forKey: .scheme)
        try container.encode(isin, forKey: .isin)
        try container.encodeIfPresent(folioNumber, forKey: .folioNumber)
        try container.encodeIfPresent(nav, forKey: .nav)
        try container.encode(dividendType, forKey: .dividendType)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
    }
}

