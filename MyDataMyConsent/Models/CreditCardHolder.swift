//
// CreditCardHolder.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreditCardHolder: Codable, JSONEncodable, Hashable {

    public var id: UUID
    public var creditCardId: UUID
    public var name: String
    public var dob: Date
    public var mobile: String
    public var nominee: HoldingNominee
    public var landline: String?
    public var address: String
    public var email: String
    public var pan: String
    public var ckycCompliance: Bool

    public init(id: UUID, creditCardId: UUID, name: String, dob: Date, mobile: String, nominee: HoldingNominee, landline: String? = nil, address: String, email: String, pan: String, ckycCompliance: Bool) {
        self.id = id
        self.creditCardId = creditCardId
        self.name = name
        self.dob = dob
        self.mobile = mobile
        self.nominee = nominee
        self.landline = landline
        self.address = address
        self.email = email
        self.pan = pan
        self.ckycCompliance = ckycCompliance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case creditCardId
        case name
        case dob
        case mobile
        case nominee
        case landline
        case address
        case email
        case pan
        case ckycCompliance
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(creditCardId, forKey: .creditCardId)
        try container.encode(name, forKey: .name)
        try container.encode(dob, forKey: .dob)
        try container.encode(mobile, forKey: .mobile)
        try container.encode(nominee, forKey: .nominee)
        try container.encodeIfPresent(landline, forKey: .landline)
        try container.encode(address, forKey: .address)
        try container.encode(email, forKey: .email)
        try container.encode(pan, forKey: .pan)
        try container.encode(ckycCompliance, forKey: .ckycCompliance)
    }
}

