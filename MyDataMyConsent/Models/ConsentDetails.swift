//
// ConsentDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ConsentDetails : Consent details. */
public struct ConsentDetails: Codable, JSONEncodable, Hashable {

    /** Consent id. */
    public var id: String
    /** Consent request id. */
    public var requestId: String
    /** Consent request template id. */
    public var templateId: String?
    /** Consent title. */
    public var title: String
    /** Consent description. */
    public var description: String
    /** Consent purpose. */
    public var purpose: String?
    public var status: DataConsentStatus
    /** Transaction id. */
    public var transactionId: String?
    /** Consent approval datetime in UTC timezone. */
    public var approvedAtUtc: Date
    /** Data access expiration datetime in UTC timezone. */
    public var dataAccessExpiresAtUtc: Date
    /** Consent revocation datetime in UTC timezone. */
    public var revokedAtUtc: Date?
    /** List of supported collectible types. */
    public var collectables: [CollectibleTypes]
    /** Consented identity details. */
    public var identifiers: [ConsentedIdentifier]?
    /** List of consented documents. */
    public var documents: [ConsentedDocument]?
    /** List of consented medical records. */
    public var medicalRecords: [ConsentedMedicalRecord]?
    /** List of consented financial accounts. */
    public var financialAccounts: [ConsentedFinancialAccountField]?

    public init(id: String, requestId: String, templateId: String? = nil, title: String, description: String, purpose: String? = nil, status: DataConsentStatus, transactionId: String? = nil, approvedAtUtc: Date, dataAccessExpiresAtUtc: Date, revokedAtUtc: Date? = nil, collectables: [CollectibleTypes], identifiers: [ConsentedIdentifier]? = nil, documents: [ConsentedDocument]? = nil, medicalRecords: [ConsentedMedicalRecord]? = nil, financialAccounts: [ConsentedFinancialAccountField]? = nil) {
        self.id = id
        self.requestId = requestId
        self.templateId = templateId
        self.title = title
        self.description = description
        self.purpose = purpose
        self.status = status
        self.transactionId = transactionId
        self.approvedAtUtc = approvedAtUtc
        self.dataAccessExpiresAtUtc = dataAccessExpiresAtUtc
        self.revokedAtUtc = revokedAtUtc
        self.collectables = collectables
        self.identifiers = identifiers
        self.documents = documents
        self.medicalRecords = medicalRecords
        self.financialAccounts = financialAccounts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case requestId
        case templateId
        case title
        case description
        case purpose
        case status
        case transactionId
        case approvedAtUtc
        case dataAccessExpiresAtUtc
        case revokedAtUtc
        case collectables
        case identifiers
        case documents
        case medicalRecords
        case financialAccounts
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(requestId, forKey: .requestId)
        try container.encodeIfPresent(templateId, forKey: .templateId)
        try container.encode(title, forKey: .title)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(purpose, forKey: .purpose)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
        try container.encode(approvedAtUtc, forKey: .approvedAtUtc)
        try container.encode(dataAccessExpiresAtUtc, forKey: .dataAccessExpiresAtUtc)
        try container.encodeIfPresent(revokedAtUtc, forKey: .revokedAtUtc)
        try container.encode(collectables, forKey: .collectables)
        try container.encodeIfPresent(identifiers, forKey: .identifiers)
        try container.encodeIfPresent(documents, forKey: .documents)
        try container.encodeIfPresent(medicalRecords, forKey: .medicalRecords)
        try container.encodeIfPresent(financialAccounts, forKey: .financialAccounts)
    }
}

