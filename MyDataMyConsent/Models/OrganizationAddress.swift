//
// OrganizationAddress.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrganizationAddress: Codable, Hashable {

    public var createdBy: UUID?
    public var createdAtUtc: Date?
    public var updatedBy: UUID?
    public var updatedAtUtc: Date?
    public var createdByUser: ApplicationUser?
    public var updatedByUser: ApplicationUser?
    public var deletedBy: UUID?
    public var deletedAtUtc: Date?
    public var deletedByUser: ApplicationUser?
    public var id: UUID?
    public var organizationId: UUID?
    public var organizationName: String?
    public var type: OrganizationAddressType?
    public var addressLine1: String?
    public var addressLine2: String?
    public var landMark: String?
    public var countryId: UUID?
    public var stateId: UUID?
    public var city: String?
    public var postCode: String?
    public var proofDocumentType: ProofDocumentType?
    public var proofDocumentUrl: String?
    public var country: Country?
    public var organization: Organization?
    public var countryState: CountryState?
    public var isPrimary: Bool?
    public var isVerified: Bool?

    public init(createdBy: UUID? = nil, createdAtUtc: Date? = nil, updatedBy: UUID? = nil, updatedAtUtc: Date? = nil, createdByUser: ApplicationUser? = nil, updatedByUser: ApplicationUser? = nil, deletedBy: UUID? = nil, deletedAtUtc: Date? = nil, deletedByUser: ApplicationUser? = nil, id: UUID? = nil, organizationId: UUID? = nil, organizationName: String? = nil, type: OrganizationAddressType? = nil, addressLine1: String? = nil, addressLine2: String? = nil, landMark: String? = nil, countryId: UUID? = nil, stateId: UUID? = nil, city: String? = nil, postCode: String? = nil, proofDocumentType: ProofDocumentType? = nil, proofDocumentUrl: String? = nil, country: Country? = nil, organization: Organization? = nil, countryState: CountryState? = nil, isPrimary: Bool? = nil, isVerified: Bool? = nil) {
        self.createdBy = createdBy
        self.createdAtUtc = createdAtUtc
        self.updatedBy = updatedBy
        self.updatedAtUtc = updatedAtUtc
        self.createdByUser = createdByUser
        self.updatedByUser = updatedByUser
        self.deletedBy = deletedBy
        self.deletedAtUtc = deletedAtUtc
        self.deletedByUser = deletedByUser
        self.id = id
        self.organizationId = organizationId
        self.organizationName = organizationName
        self.type = type
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.landMark = landMark
        self.countryId = countryId
        self.stateId = stateId
        self.city = city
        self.postCode = postCode
        self.proofDocumentType = proofDocumentType
        self.proofDocumentUrl = proofDocumentUrl
        self.country = country
        self.organization = organization
        self.countryState = countryState
        self.isPrimary = isPrimary
        self.isVerified = isVerified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdBy
        case createdAtUtc
        case updatedBy
        case updatedAtUtc
        case createdByUser
        case updatedByUser
        case deletedBy
        case deletedAtUtc
        case deletedByUser
        case id
        case organizationId
        case organizationName
        case type
        case addressLine1
        case addressLine2
        case landMark
        case countryId
        case stateId
        case city
        case postCode
        case proofDocumentType
        case proofDocumentUrl
        case country
        case organization
        case countryState
        case isPrimary
        case isVerified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(createdAtUtc, forKey: .createdAtUtc)
        try container.encodeIfPresent(updatedBy, forKey: .updatedBy)
        try container.encodeIfPresent(updatedAtUtc, forKey: .updatedAtUtc)
        try container.encodeIfPresent(createdByUser, forKey: .createdByUser)
        try container.encodeIfPresent(updatedByUser, forKey: .updatedByUser)
        try container.encodeIfPresent(deletedBy, forKey: .deletedBy)
        try container.encodeIfPresent(deletedAtUtc, forKey: .deletedAtUtc)
        try container.encodeIfPresent(deletedByUser, forKey: .deletedByUser)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(organizationId, forKey: .organizationId)
        try container.encodeIfPresent(organizationName, forKey: .organizationName)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(addressLine1, forKey: .addressLine1)
        try container.encodeIfPresent(addressLine2, forKey: .addressLine2)
        try container.encodeIfPresent(landMark, forKey: .landMark)
        try container.encodeIfPresent(countryId, forKey: .countryId)
        try container.encodeIfPresent(stateId, forKey: .stateId)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(postCode, forKey: .postCode)
        try container.encodeIfPresent(proofDocumentType, forKey: .proofDocumentType)
        try container.encodeIfPresent(proofDocumentUrl, forKey: .proofDocumentUrl)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(organization, forKey: .organization)
        try container.encodeIfPresent(countryState, forKey: .countryState)
        try container.encodeIfPresent(isPrimary, forKey: .isPrimary)
        try container.encodeIfPresent(isVerified, forKey: .isVerified)
    }
}

