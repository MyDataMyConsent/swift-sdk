//
// DataConsent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DataConsent: Codable, Hashable {

    public var id: UUID?
    public var userId: UUID?
    public var organizationId: UUID?
    public var requestedByOrgId: UUID?
    public var transactionId: String?
    public var startDateTime: Date?
    public var expiryDateTime: Date?
    public var description: String?
    public var purposeCode: String?
    public var purposeLink: String?
    public var location: String?
    public var agreementId: UUID?
    public var dataLifeUnit: DataLifeUnit?
    public var dataLifeValue: Int?
    public var dataFetchFrequencyUnit: DataFetchFrequencyUnit?
    public var dataFetchFrequencyUnitValue: Int?
    public var dataFetchType: DataFetchType?
    public var status: DataConsentStatus?
    public var createdAtUtc: Date?
    public var approvedAtUtc: Date?
    public var rejectedAtUtc: Date?
    public var user: ApplicationUser?
    public var organization: Organization?
    public var requestedByOrg: Organization?
    public var agreement: DataProcessingAgreement?
    public var identityClaims: [IdentityClaim]?
    public var identifiers: [DataConsentIdentifier]?
    public var requestedFinancialAccounts: [DataConsentRequestedFinancialAccount]?
    public var requestedDocuments: [DataConsentRequestedDocument]?

    public init(id: UUID? = nil, userId: UUID? = nil, organizationId: UUID? = nil, requestedByOrgId: UUID? = nil, transactionId: String? = nil, startDateTime: Date? = nil, expiryDateTime: Date? = nil, description: String? = nil, purposeCode: String? = nil, purposeLink: String? = nil, location: String? = nil, agreementId: UUID? = nil, dataLifeUnit: DataLifeUnit? = nil, dataLifeValue: Int? = nil, dataFetchFrequencyUnit: DataFetchFrequencyUnit? = nil, dataFetchFrequencyUnitValue: Int? = nil, dataFetchType: DataFetchType? = nil, status: DataConsentStatus? = nil, createdAtUtc: Date? = nil, approvedAtUtc: Date? = nil, rejectedAtUtc: Date? = nil, user: ApplicationUser? = nil, organization: Organization? = nil, requestedByOrg: Organization? = nil, agreement: DataProcessingAgreement? = nil, identityClaims: [IdentityClaim]? = nil, identifiers: [DataConsentIdentifier]? = nil, requestedFinancialAccounts: [DataConsentRequestedFinancialAccount]? = nil, requestedDocuments: [DataConsentRequestedDocument]? = nil) {
        self.id = id
        self.userId = userId
        self.organizationId = organizationId
        self.requestedByOrgId = requestedByOrgId
        self.transactionId = transactionId
        self.startDateTime = startDateTime
        self.expiryDateTime = expiryDateTime
        self.description = description
        self.purposeCode = purposeCode
        self.purposeLink = purposeLink
        self.location = location
        self.agreementId = agreementId
        self.dataLifeUnit = dataLifeUnit
        self.dataLifeValue = dataLifeValue
        self.dataFetchFrequencyUnit = dataFetchFrequencyUnit
        self.dataFetchFrequencyUnitValue = dataFetchFrequencyUnitValue
        self.dataFetchType = dataFetchType
        self.status = status
        self.createdAtUtc = createdAtUtc
        self.approvedAtUtc = approvedAtUtc
        self.rejectedAtUtc = rejectedAtUtc
        self.user = user
        self.organization = organization
        self.requestedByOrg = requestedByOrg
        self.agreement = agreement
        self.identityClaims = identityClaims
        self.identifiers = identifiers
        self.requestedFinancialAccounts = requestedFinancialAccounts
        self.requestedDocuments = requestedDocuments
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userId
        case organizationId
        case requestedByOrgId
        case transactionId
        case startDateTime
        case expiryDateTime
        case description
        case purposeCode
        case purposeLink
        case location
        case agreementId
        case dataLifeUnit
        case dataLifeValue
        case dataFetchFrequencyUnit
        case dataFetchFrequencyUnitValue
        case dataFetchType
        case status
        case createdAtUtc
        case approvedAtUtc
        case rejectedAtUtc
        case user
        case organization
        case requestedByOrg
        case agreement
        case identityClaims
        case identifiers
        case requestedFinancialAccounts
        case requestedDocuments
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(organizationId, forKey: .organizationId)
        try container.encodeIfPresent(requestedByOrgId, forKey: .requestedByOrgId)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
        try container.encodeIfPresent(startDateTime, forKey: .startDateTime)
        try container.encodeIfPresent(expiryDateTime, forKey: .expiryDateTime)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(purposeCode, forKey: .purposeCode)
        try container.encodeIfPresent(purposeLink, forKey: .purposeLink)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(agreementId, forKey: .agreementId)
        try container.encodeIfPresent(dataLifeUnit, forKey: .dataLifeUnit)
        try container.encodeIfPresent(dataLifeValue, forKey: .dataLifeValue)
        try container.encodeIfPresent(dataFetchFrequencyUnit, forKey: .dataFetchFrequencyUnit)
        try container.encodeIfPresent(dataFetchFrequencyUnitValue, forKey: .dataFetchFrequencyUnitValue)
        try container.encodeIfPresent(dataFetchType, forKey: .dataFetchType)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(createdAtUtc, forKey: .createdAtUtc)
        try container.encodeIfPresent(approvedAtUtc, forKey: .approvedAtUtc)
        try container.encodeIfPresent(rejectedAtUtc, forKey: .rejectedAtUtc)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(organization, forKey: .organization)
        try container.encodeIfPresent(requestedByOrg, forKey: .requestedByOrg)
        try container.encodeIfPresent(agreement, forKey: .agreement)
        try container.encodeIfPresent(identityClaims, forKey: .identityClaims)
        try container.encodeIfPresent(identifiers, forKey: .identifiers)
        try container.encodeIfPresent(requestedFinancialAccounts, forKey: .requestedFinancialAccounts)
        try container.encodeIfPresent(requestedDocuments, forKey: .requestedDocuments)
    }
}

