//
// UserAccountFinancialTransactionsDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserAccountFinancialTransactionsDto: Codable, Hashable {

    public var id: UUID?
    public var accountId: UUID?
    public var name: String?
    public var instrumentId: UUID?
    public var transactionType: String?
    public var quantity: Int?
    public var averagePrice: Double?
    public var currency: String?

    public init(id: UUID? = nil, accountId: UUID? = nil, name: String? = nil, instrumentId: UUID? = nil, transactionType: String? = nil, quantity: Int? = nil, averagePrice: Double? = nil, currency: String? = nil) {
        self.id = id
        self.accountId = accountId
        self.name = name
        self.instrumentId = instrumentId
        self.transactionType = transactionType
        self.quantity = quantity
        self.averagePrice = averagePrice
        self.currency = currency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case accountId
        case name
        case instrumentId
        case transactionType
        case quantity
        case averagePrice
        case currency
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(instrumentId, forKey: .instrumentId)
        try container.encodeIfPresent(transactionType, forKey: .transactionType)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(averagePrice, forKey: .averagePrice)
        try container.encodeIfPresent(currency, forKey: .currency)
    }
}

