//
// OrganizationDocumentDetailsDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrganizationDocumentDetailsDto: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var organizationId: UUID?
    public var organizationName: String?
    public var typeId: UUID?
    public var typeName: String?
    public var name: String?
    public var identifier: String?
    public var storageUrl: String?
    public var countryIso2: String?
    public var issuerId: UUID?
    public var issuerName: String?

    public init(id: UUID? = nil, organizationId: UUID? = nil, organizationName: String? = nil, typeId: UUID? = nil, typeName: String? = nil, name: String? = nil, identifier: String? = nil, storageUrl: String? = nil, countryIso2: String? = nil, issuerId: UUID? = nil, issuerName: String? = nil) {
        self.id = id
        self.organizationId = organizationId
        self.organizationName = organizationName
        self.typeId = typeId
        self.typeName = typeName
        self.name = name
        self.identifier = identifier
        self.storageUrl = storageUrl
        self.countryIso2 = countryIso2
        self.issuerId = issuerId
        self.issuerName = issuerName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case organizationId
        case organizationName
        case typeId
        case typeName
        case name
        case identifier
        case storageUrl
        case countryIso2
        case issuerId
        case issuerName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(organizationId, forKey: .organizationId)
        try container.encodeIfPresent(organizationName, forKey: .organizationName)
        try container.encodeIfPresent(typeId, forKey: .typeId)
        try container.encodeIfPresent(typeName, forKey: .typeName)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(identifier, forKey: .identifier)
        try container.encodeIfPresent(storageUrl, forKey: .storageUrl)
        try container.encodeIfPresent(countryIso2, forKey: .countryIso2)
        try container.encodeIfPresent(issuerId, forKey: .issuerId)
        try container.encodeIfPresent(issuerName, forKey: .issuerName)
    }
}

