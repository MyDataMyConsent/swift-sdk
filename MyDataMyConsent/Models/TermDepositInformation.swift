//
// TermDepositInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TermDepositInformation: Codable, JSONEncodable, Hashable {

    public var depositType: TermDepositAccountType
    public var description: String
    public var currencyCode: String
    public var principalAmount: Double
    public var interestRate: Float
    public var interestPayout: TermDepositInterestPayoutType
    public var interestComputation: TermDepositInterestComputation
    public var compoundingFrequency: TermDepositCompoundingFrequency
    public var interestPeriodicPayoutAmount: Double
    public var interestOnMaturity: Double
    public var depositOpeningDate: Date
    public var maturityDate: Date
    public var maturityAmount: Double
    public var tenureDays: Int
    public var tenureMonths: Int
    public var tenureYears: Int

    public init(depositType: TermDepositAccountType, description: String, currencyCode: String, principalAmount: Double, interestRate: Float, interestPayout: TermDepositInterestPayoutType, interestComputation: TermDepositInterestComputation, compoundingFrequency: TermDepositCompoundingFrequency, interestPeriodicPayoutAmount: Double, interestOnMaturity: Double, depositOpeningDate: Date, maturityDate: Date, maturityAmount: Double, tenureDays: Int, tenureMonths: Int, tenureYears: Int) {
        self.depositType = depositType
        self.description = description
        self.currencyCode = currencyCode
        self.principalAmount = principalAmount
        self.interestRate = interestRate
        self.interestPayout = interestPayout
        self.interestComputation = interestComputation
        self.compoundingFrequency = compoundingFrequency
        self.interestPeriodicPayoutAmount = interestPeriodicPayoutAmount
        self.interestOnMaturity = interestOnMaturity
        self.depositOpeningDate = depositOpeningDate
        self.maturityDate = maturityDate
        self.maturityAmount = maturityAmount
        self.tenureDays = tenureDays
        self.tenureMonths = tenureMonths
        self.tenureYears = tenureYears
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case depositType = "deposit_type"
        case description
        case currencyCode = "currency_code"
        case principalAmount = "principal_amount"
        case interestRate = "interest_rate"
        case interestPayout = "interest_payout"
        case interestComputation = "interest_computation"
        case compoundingFrequency = "compounding_frequency"
        case interestPeriodicPayoutAmount = "interest_periodic_payout_amount"
        case interestOnMaturity = "interest_on_maturity"
        case depositOpeningDate = "deposit_opening_date"
        case maturityDate = "maturity_date"
        case maturityAmount = "maturity_amount"
        case tenureDays = "tenure_days"
        case tenureMonths = "tenure_months"
        case tenureYears = "tenure_years"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(depositType, forKey: .depositType)
        try container.encode(description, forKey: .description)
        try container.encode(currencyCode, forKey: .currencyCode)
        try container.encode(principalAmount, forKey: .principalAmount)
        try container.encode(interestRate, forKey: .interestRate)
        try container.encode(interestPayout, forKey: .interestPayout)
        try container.encode(interestComputation, forKey: .interestComputation)
        try container.encode(compoundingFrequency, forKey: .compoundingFrequency)
        try container.encode(interestPeriodicPayoutAmount, forKey: .interestPeriodicPayoutAmount)
        try container.encode(interestOnMaturity, forKey: .interestOnMaturity)
        try container.encode(depositOpeningDate, forKey: .depositOpeningDate)
        try container.encode(maturityDate, forKey: .maturityDate)
        try container.encode(maturityAmount, forKey: .maturityAmount)
        try container.encode(tenureDays, forKey: .tenureDays)
        try container.encode(tenureMonths, forKey: .tenureMonths)
        try container.encode(tenureYears, forKey: .tenureYears)
    }
}

