//
// Country.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Country: Codable, Hashable {

    public var id: UUID?
    public var name: String?
    public var iso3: String?
    public var iso2: String?
    public var phoneCode: String?
    public var capital: String?
    public var currencyCode: String?
    public var currencySymbol: String?
    public var flagUrl: String?
    public var states: [CountryState]?

    public init(id: UUID? = nil, name: String? = nil, iso3: String? = nil, iso2: String? = nil, phoneCode: String? = nil, capital: String? = nil, currencyCode: String? = nil, currencySymbol: String? = nil, flagUrl: String? = nil, states: [CountryState]? = nil) {
        self.id = id
        self.name = name
        self.iso3 = iso3
        self.iso2 = iso2
        self.phoneCode = phoneCode
        self.capital = capital
        self.currencyCode = currencyCode
        self.currencySymbol = currencySymbol
        self.flagUrl = flagUrl
        self.states = states
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case iso3
        case iso2
        case phoneCode
        case capital
        case currencyCode
        case currencySymbol
        case flagUrl
        case states
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(iso3, forKey: .iso3)
        try container.encodeIfPresent(iso2, forKey: .iso2)
        try container.encodeIfPresent(phoneCode, forKey: .phoneCode)
        try container.encodeIfPresent(capital, forKey: .capital)
        try container.encodeIfPresent(currencyCode, forKey: .currencyCode)
        try container.encodeIfPresent(currencySymbol, forKey: .currencySymbol)
        try container.encodeIfPresent(flagUrl, forKey: .flagUrl)
        try container.encodeIfPresent(states, forKey: .states)
    }
}

