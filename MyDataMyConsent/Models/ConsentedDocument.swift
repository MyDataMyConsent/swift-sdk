//
// ConsentedDocument.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ConsentedDocument : Consented document details. */
public struct ConsentedDocument: Codable, JSONEncodable, Hashable {

    /** Document id. */
    public var id: String
    /** Document name. */
    public var name: String
    /** Document category. */
    public var category: String
    /** Document identifier. */
    public var identifier: String
    /** Document field title. */
    public var fieldTitle: String
    /** Document field slug. */
    public var fieldSlug: String
    /** Document issued at datetime in UTC timezone. */
    public var issuedAtUtc: Date
    /** Document expires at datetime in UTC timezone. */
    public var expiresAtUtc: Date?
    public var issuer: ConsentDocumentIssuer
    /** Digital signatures. */
    public var digitalSignatures: [DocumentDigitalSignature]

    public init(id: String, name: String, category: String, identifier: String, fieldTitle: String, fieldSlug: String, issuedAtUtc: Date, expiresAtUtc: Date? = nil, issuer: ConsentDocumentIssuer, digitalSignatures: [DocumentDigitalSignature]) {
        self.id = id
        self.name = name
        self.category = category
        self.identifier = identifier
        self.fieldTitle = fieldTitle
        self.fieldSlug = fieldSlug
        self.issuedAtUtc = issuedAtUtc
        self.expiresAtUtc = expiresAtUtc
        self.issuer = issuer
        self.digitalSignatures = digitalSignatures
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case category
        case identifier
        case fieldTitle
        case fieldSlug
        case issuedAtUtc
        case expiresAtUtc
        case issuer
        case digitalSignatures
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(category, forKey: .category)
        try container.encode(identifier, forKey: .identifier)
        try container.encode(fieldTitle, forKey: .fieldTitle)
        try container.encode(fieldSlug, forKey: .fieldSlug)
        try container.encode(issuedAtUtc, forKey: .issuedAtUtc)
        try container.encodeIfPresent(expiresAtUtc, forKey: .expiresAtUtc)
        try container.encode(issuer, forKey: .issuer)
        try container.encode(digitalSignatures, forKey: .digitalSignatures)
    }
}

