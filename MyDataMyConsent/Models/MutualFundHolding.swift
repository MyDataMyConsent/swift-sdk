//
// MutualFundHolding.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MutualFundHolding: Codable, JSONEncodable, Hashable {

    public var name: String
    public var amc: String?
    public var registrar: String?
    public var schemeCode: String?
    public var isin: String
    public var ucc: String?
    public var amfiCode: String?
    public var folioNo: String
    public var dividendType: String?
    public var fatcaStatus: String?
    public var mode: MutualFundHoldingMode
    public var units: Double
    public var closingUnits: String?
    public var lienUnits: String?
    public var rate: String?
    public var nav: String?
    public var lockingUnits: String?

    public init(name: String, amc: String? = nil, registrar: String? = nil, schemeCode: String? = nil, isin: String, ucc: String? = nil, amfiCode: String? = nil, folioNo: String, dividendType: String? = nil, fatcaStatus: String? = nil, mode: MutualFundHoldingMode, units: Double, closingUnits: String? = nil, lienUnits: String? = nil, rate: String? = nil, nav: String? = nil, lockingUnits: String? = nil) {
        self.name = name
        self.amc = amc
        self.registrar = registrar
        self.schemeCode = schemeCode
        self.isin = isin
        self.ucc = ucc
        self.amfiCode = amfiCode
        self.folioNo = folioNo
        self.dividendType = dividendType
        self.fatcaStatus = fatcaStatus
        self.mode = mode
        self.units = units
        self.closingUnits = closingUnits
        self.lienUnits = lienUnits
        self.rate = rate
        self.nav = nav
        self.lockingUnits = lockingUnits
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case amc
        case registrar
        case schemeCode
        case isin
        case ucc
        case amfiCode
        case folioNo
        case dividendType
        case fatcaStatus
        case mode
        case units
        case closingUnits
        case lienUnits
        case rate
        case nav
        case lockingUnits
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(amc, forKey: .amc)
        try container.encodeIfPresent(registrar, forKey: .registrar)
        try container.encodeIfPresent(schemeCode, forKey: .schemeCode)
        try container.encode(isin, forKey: .isin)
        try container.encodeIfPresent(ucc, forKey: .ucc)
        try container.encodeIfPresent(amfiCode, forKey: .amfiCode)
        try container.encode(folioNo, forKey: .folioNo)
        try container.encodeIfPresent(dividendType, forKey: .dividendType)
        try container.encodeIfPresent(fatcaStatus, forKey: .fatcaStatus)
        try container.encode(mode, forKey: .mode)
        try container.encode(units, forKey: .units)
        try container.encodeIfPresent(closingUnits, forKey: .closingUnits)
        try container.encodeIfPresent(lienUnits, forKey: .lienUnits)
        try container.encodeIfPresent(rate, forKey: .rate)
        try container.encodeIfPresent(nav, forKey: .nav)
        try container.encodeIfPresent(lockingUnits, forKey: .lockingUnits)
    }
}

