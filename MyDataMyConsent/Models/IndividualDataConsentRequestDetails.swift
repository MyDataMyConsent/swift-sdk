//
// IndividualDataConsentRequestDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** DataConsentRequestResponse */
public struct IndividualDataConsentRequestDetails: Codable, JSONEncodable, Hashable {

    /** Name of request receiver individual. */
    public var receiver: String
    /** Consent request id */
    public var id: UUID
    /** Consent request template id */
    public var templateId: UUID?
    /** Data Consent id */
    public var consentId: UUID?
    /** Consent request title. */
    public var title: String
    /** Consent request description. */
    public var description: String
    /** Consent request purpose. */
    public var purpose: String?
    public var status: DataConsentStatus
    /** Transaction id */
    public var transactionId: String?
    /** Request creation datetime in UTC timezone */
    public var createdAtUtc: Date
    /** Request expiration datetime in UTC timezone */
    public var expiresAtUtc: Date

    public init(receiver: String, id: UUID, templateId: UUID? = nil, consentId: UUID? = nil, title: String, description: String, purpose: String? = nil, status: DataConsentStatus, transactionId: String? = nil, createdAtUtc: Date, expiresAtUtc: Date) {
        self.receiver = receiver
        self.id = id
        self.templateId = templateId
        self.consentId = consentId
        self.title = title
        self.description = description
        self.purpose = purpose
        self.status = status
        self.transactionId = transactionId
        self.createdAtUtc = createdAtUtc
        self.expiresAtUtc = expiresAtUtc
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case receiver
        case id
        case templateId
        case consentId
        case title
        case description
        case purpose
        case status
        case transactionId
        case createdAtUtc
        case expiresAtUtc
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(receiver, forKey: .receiver)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(templateId, forKey: .templateId)
        try container.encodeIfPresent(consentId, forKey: .consentId)
        try container.encode(title, forKey: .title)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(purpose, forKey: .purpose)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(transactionId, forKey: .transactionId)
        try container.encode(createdAtUtc, forKey: .createdAtUtc)
        try container.encode(expiresAtUtc, forKey: .expiresAtUtc)
    }
}

