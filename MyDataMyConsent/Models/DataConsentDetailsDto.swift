//
// DataConsentDetailsDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DataConsentDetailsDto: Codable, JSONEncodable, Hashable {

    public var consentRequestId: UUID
    public var title: String?
    public var description: String?
    public var dataLife: Life?
    public var requestedByOrg: Requester?
    public var status: DataConsentStatus?
    public var approvedAtUtc: Date?
    public var approvedExpiresAtUtc: Date?
    public var rejectedAtUtc: Date?
    public var revokedAtUtc: Date?
    public var requestedExpiresAtUtc: Date?
    public var requestedAtUtc: Date?
    public var identifiers: AnyCodable?
    public var documents: [DataConsentDocumentDetailsDto]?

    public init(consentRequestId: UUID, title: String? = nil, description: String? = nil, dataLife: Life? = nil, requestedByOrg: Requester? = nil, status: DataConsentStatus? = nil, approvedAtUtc: Date? = nil, approvedExpiresAtUtc: Date? = nil, rejectedAtUtc: Date? = nil, revokedAtUtc: Date? = nil, requestedExpiresAtUtc: Date? = nil, requestedAtUtc: Date? = nil, identifiers: AnyCodable? = nil, documents: [DataConsentDocumentDetailsDto]? = nil) {
        self.consentRequestId = consentRequestId
        self.title = title
        self.description = description
        self.dataLife = dataLife
        self.requestedByOrg = requestedByOrg
        self.status = status
        self.approvedAtUtc = approvedAtUtc
        self.approvedExpiresAtUtc = approvedExpiresAtUtc
        self.rejectedAtUtc = rejectedAtUtc
        self.revokedAtUtc = revokedAtUtc
        self.requestedExpiresAtUtc = requestedExpiresAtUtc
        self.requestedAtUtc = requestedAtUtc
        self.identifiers = identifiers
        self.documents = documents
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case consentRequestId
        case title
        case description
        case dataLife
        case requestedByOrg
        case status
        case approvedAtUtc
        case approvedExpiresAtUtc
        case rejectedAtUtc
        case revokedAtUtc
        case requestedExpiresAtUtc
        case requestedAtUtc
        case identifiers
        case documents
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(consentRequestId, forKey: .consentRequestId)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(dataLife, forKey: .dataLife)
        try container.encodeIfPresent(requestedByOrg, forKey: .requestedByOrg)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(approvedAtUtc, forKey: .approvedAtUtc)
        try container.encodeIfPresent(approvedExpiresAtUtc, forKey: .approvedExpiresAtUtc)
        try container.encodeIfPresent(rejectedAtUtc, forKey: .rejectedAtUtc)
        try container.encodeIfPresent(revokedAtUtc, forKey: .revokedAtUtc)
        try container.encodeIfPresent(requestedExpiresAtUtc, forKey: .requestedExpiresAtUtc)
        try container.encodeIfPresent(requestedAtUtc, forKey: .requestedAtUtc)
        try container.encodeIfPresent(identifiers, forKey: .identifiers)
        try container.encodeIfPresent(documents, forKey: .documents)
    }
}

