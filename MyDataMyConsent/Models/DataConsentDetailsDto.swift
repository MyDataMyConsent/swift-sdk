//
// DataConsentDetailsDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DataConsentDetailsDto: Codable, Hashable {

    public var id: UUID?
    public var status: DataConsentStatus?
    public var approvedAtUtc: Date?
    public var rejectedAtUtc: Date?
    public var expiresAtUtc: Date?
    public var requestedAtUtc: Date?
    public var requester: DataConsentRequesterDto?
    public var consentDetails: GetConsentTemplateDetailsDto?
    public var identifiers: [DataConsentIdentifier]?
    public var approvedDocuments: [DataConsentRequestedDocument]?
    public var approvedFinancials: [DataConsentRequestedFinancialAccount]?

    public init(id: UUID? = nil, status: DataConsentStatus? = nil, approvedAtUtc: Date? = nil, rejectedAtUtc: Date? = nil, expiresAtUtc: Date? = nil, requestedAtUtc: Date? = nil, requester: DataConsentRequesterDto? = nil, consentDetails: GetConsentTemplateDetailsDto? = nil, identifiers: [DataConsentIdentifier]? = nil, approvedDocuments: [DataConsentRequestedDocument]? = nil, approvedFinancials: [DataConsentRequestedFinancialAccount]? = nil) {
        self.id = id
        self.status = status
        self.approvedAtUtc = approvedAtUtc
        self.rejectedAtUtc = rejectedAtUtc
        self.expiresAtUtc = expiresAtUtc
        self.requestedAtUtc = requestedAtUtc
        self.requester = requester
        self.consentDetails = consentDetails
        self.identifiers = identifiers
        self.approvedDocuments = approvedDocuments
        self.approvedFinancials = approvedFinancials
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case status
        case approvedAtUtc
        case rejectedAtUtc
        case expiresAtUtc
        case requestedAtUtc
        case requester
        case consentDetails
        case identifiers
        case approvedDocuments
        case approvedFinancials
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(approvedAtUtc, forKey: .approvedAtUtc)
        try container.encodeIfPresent(rejectedAtUtc, forKey: .rejectedAtUtc)
        try container.encodeIfPresent(expiresAtUtc, forKey: .expiresAtUtc)
        try container.encodeIfPresent(requestedAtUtc, forKey: .requestedAtUtc)
        try container.encodeIfPresent(requester, forKey: .requester)
        try container.encodeIfPresent(consentDetails, forKey: .consentDetails)
        try container.encodeIfPresent(identifiers, forKey: .identifiers)
        try container.encodeIfPresent(approvedDocuments, forKey: .approvedDocuments)
        try container.encodeIfPresent(approvedFinancials, forKey: .approvedFinancials)
    }
}

