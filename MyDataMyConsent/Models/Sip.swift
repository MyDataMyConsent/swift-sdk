//
// Sip.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Sip: Codable, JSONEncodable, Hashable {

    public var id: String
    public var name: String
    public var investmentValue: Double
    public var currentValue: Double
    public var currencyCode: String
    public var planInfo: SipPlanInformation
    public var investmentInfo: SipInvestmentInformation
    public var holder: Holder
    public var transactions: Bool

    public init(id: String, name: String, investmentValue: Double, currentValue: Double, currencyCode: String, planInfo: SipPlanInformation, investmentInfo: SipInvestmentInformation, holder: Holder, transactions: Bool) {
        self.id = id
        self.name = name
        self.investmentValue = investmentValue
        self.currentValue = currentValue
        self.currencyCode = currencyCode
        self.planInfo = planInfo
        self.investmentInfo = investmentInfo
        self.holder = holder
        self.transactions = transactions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case investmentValue = "investment_value"
        case currentValue = "current_value"
        case currencyCode = "currency_code"
        case planInfo = "plan_info"
        case investmentInfo = "investment_info"
        case holder
        case transactions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(investmentValue, forKey: .investmentValue)
        try container.encode(currentValue, forKey: .currentValue)
        try container.encode(currencyCode, forKey: .currencyCode)
        try container.encode(planInfo, forKey: .planInfo)
        try container.encode(investmentInfo, forKey: .investmentInfo)
        try container.encode(holder, forKey: .holder)
        try container.encode(transactions, forKey: .transactions)
    }
}

