//
// DocumentIssueRequestDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** DocumentIssueRequestDetails : Document issue request details. */
public struct DocumentIssueRequestDetails: Codable, JSONEncodable, Hashable {

    /** Document issue request Id. */
    public var id: String
    /** Document type Id. */
    public var documentTypeId: String
    /** Document type name. */
    public var typeName: String
    /** Document identifier. */
    public var identifier: String
    public var status: DocumentIssueRequestStatus
    /** Document description. */
    public var description: String
    public var receiver: DocumentIssueRequestDetailsReceiver
    public var paymentRequest: PaymentRequest?
    /** Datetime of issue in UTC timezone. */
    public var issuedAtUtc: Date
    /** Valid from datetime in UTC timezone. */
    public var validFromUtc: Date
    /** Datetime of expiry in UTC timezone. */
    public var expiresAtUtc: Date?
    /** Metadata. */
    public var metaData: AnyCodable?
    /** Creation datetime of issue request in UTC timezone. */
    public var createdAtUtc: Date

    public init(id: String, documentTypeId: String, typeName: String, identifier: String, status: DocumentIssueRequestStatus, description: String, receiver: DocumentIssueRequestDetailsReceiver, paymentRequest: PaymentRequest? = nil, issuedAtUtc: Date, validFromUtc: Date, expiresAtUtc: Date? = nil, metaData: AnyCodable? = nil, createdAtUtc: Date) {
        self.id = id
        self.documentTypeId = documentTypeId
        self.typeName = typeName
        self.identifier = identifier
        self.status = status
        self.description = description
        self.receiver = receiver
        self.paymentRequest = paymentRequest
        self.issuedAtUtc = issuedAtUtc
        self.validFromUtc = validFromUtc
        self.expiresAtUtc = expiresAtUtc
        self.metaData = metaData
        self.createdAtUtc = createdAtUtc
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case documentTypeId
        case typeName
        case identifier
        case status
        case description
        case receiver
        case paymentRequest
        case issuedAtUtc
        case validFromUtc
        case expiresAtUtc
        case metaData
        case createdAtUtc
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(documentTypeId, forKey: .documentTypeId)
        try container.encode(typeName, forKey: .typeName)
        try container.encode(identifier, forKey: .identifier)
        try container.encode(status, forKey: .status)
        try container.encode(description, forKey: .description)
        try container.encode(receiver, forKey: .receiver)
        try container.encodeIfPresent(paymentRequest, forKey: .paymentRequest)
        try container.encode(issuedAtUtc, forKey: .issuedAtUtc)
        try container.encode(validFromUtc, forKey: .validFromUtc)
        try container.encodeIfPresent(expiresAtUtc, forKey: .expiresAtUtc)
        try container.encodeIfPresent(metaData, forKey: .metaData)
        try container.encode(createdAtUtc, forKey: .createdAtUtc)
    }
}

