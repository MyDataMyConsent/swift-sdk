//
// ConsentedMedicalRecord.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** ConsentedMedicalRecord : Consented medical record details. */
public struct ConsentedMedicalRecord: Codable, JSONEncodable, Hashable {

    /** Health id. */
    public var id: String?
    /** Health field title. */
    public var fieldTitle: String
    /** Health field slug. */
    public var fieldSlug: String
    /** Issuer id. */
    public var issuerId: String
    /** Issuer name. */
    public var issuerName: String
    /** health category type. */
    public var category: String
    /** To Date */
    public var toDate: Date?
    /** From Date */
    public var fromDate: Date?

    public init(id: String? = nil, fieldTitle: String, fieldSlug: String, issuerId: String, issuerName: String, category: String, toDate: Date? = nil, fromDate: Date? = nil) {
        self.id = id
        self.fieldTitle = fieldTitle
        self.fieldSlug = fieldSlug
        self.issuerId = issuerId
        self.issuerName = issuerName
        self.category = category
        self.toDate = toDate
        self.fromDate = fromDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case fieldTitle
        case fieldSlug
        case issuerId
        case issuerName
        case category
        case toDate
        case fromDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(fieldTitle, forKey: .fieldTitle)
        try container.encode(fieldSlug, forKey: .fieldSlug)
        try container.encode(issuerId, forKey: .issuerId)
        try container.encode(issuerName, forKey: .issuerName)
        try container.encode(category, forKey: .category)
        try container.encodeIfPresent(toDate, forKey: .toDate)
        try container.encodeIfPresent(fromDate, forKey: .fromDate)
    }
}

