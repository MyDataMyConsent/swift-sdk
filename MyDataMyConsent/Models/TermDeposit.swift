//
// TermDeposit.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TermDeposit: Codable, JSONEncodable, Hashable {

    public var accountNumber: String
    public var accountType: TermDepositAccountType
    public var issuerName: String
    public var issuerLogoUrl: String
    public var currentValue: Double
    public var currencyCode: String
    public var accountDetails: TermDepositAccountDetails

    public init(accountNumber: String, accountType: TermDepositAccountType, issuerName: String, issuerLogoUrl: String, currentValue: Double, currencyCode: String, accountDetails: TermDepositAccountDetails) {
        self.accountNumber = accountNumber
        self.accountType = accountType
        self.issuerName = issuerName
        self.issuerLogoUrl = issuerLogoUrl
        self.currentValue = currentValue
        self.currencyCode = currencyCode
        self.accountDetails = accountDetails
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountNumber = "account_number"
        case accountType = "account_type"
        case issuerName = "issuer_name"
        case issuerLogoUrl = "issuer_logo_url"
        case currentValue = "current_value"
        case currencyCode = "currency_code"
        case accountDetails = "account_details"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accountNumber, forKey: .accountNumber)
        try container.encode(accountType, forKey: .accountType)
        try container.encode(issuerName, forKey: .issuerName)
        try container.encode(issuerLogoUrl, forKey: .issuerLogoUrl)
        try container.encode(currentValue, forKey: .currentValue)
        try container.encode(currencyCode, forKey: .currencyCode)
        try container.encode(accountDetails, forKey: .accountDetails)
    }
}

