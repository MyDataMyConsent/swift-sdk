//
// FinancialAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FinancialAccount: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var issuer: String?
    public var logoUrl: String?
    public var categoryId: String?
    public var categoryName: String?
    public var accountName: String?
    public var accountLogoUrl: String?
    public var balance: String?
    public var balanceType: String?
    public var isShared: Bool?
    public var sharedWith: [SharedWith]?
    public var isReceived: Bool?
    public var expiresAtUtc: Date?
    public var activities: [Activity]?
    public var approvedConsentRequests: [ApprovedConsentRequest]?

    public init(id: UUID? = nil, issuer: String? = nil, logoUrl: String? = nil, categoryId: String? = nil, categoryName: String? = nil, accountName: String? = nil, accountLogoUrl: String? = nil, balance: String? = nil, balanceType: String? = nil, isShared: Bool? = nil, sharedWith: [SharedWith]? = nil, isReceived: Bool? = nil, expiresAtUtc: Date? = nil, activities: [Activity]? = nil, approvedConsentRequests: [ApprovedConsentRequest]? = nil) {
        self.id = id
        self.issuer = issuer
        self.logoUrl = logoUrl
        self.categoryId = categoryId
        self.categoryName = categoryName
        self.accountName = accountName
        self.accountLogoUrl = accountLogoUrl
        self.balance = balance
        self.balanceType = balanceType
        self.isShared = isShared
        self.sharedWith = sharedWith
        self.isReceived = isReceived
        self.expiresAtUtc = expiresAtUtc
        self.activities = activities
        self.approvedConsentRequests = approvedConsentRequests
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case issuer
        case logoUrl
        case categoryId
        case categoryName
        case accountName
        case accountLogoUrl
        case balance
        case balanceType
        case isShared
        case sharedWith
        case isReceived
        case expiresAtUtc
        case activities
        case approvedConsentRequests
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(issuer, forKey: .issuer)
        try container.encodeIfPresent(logoUrl, forKey: .logoUrl)
        try container.encodeIfPresent(categoryId, forKey: .categoryId)
        try container.encodeIfPresent(categoryName, forKey: .categoryName)
        try container.encodeIfPresent(accountName, forKey: .accountName)
        try container.encodeIfPresent(accountLogoUrl, forKey: .accountLogoUrl)
        try container.encodeIfPresent(balance, forKey: .balance)
        try container.encodeIfPresent(balanceType, forKey: .balanceType)
        try container.encodeIfPresent(isShared, forKey: .isShared)
        try container.encodeIfPresent(sharedWith, forKey: .sharedWith)
        try container.encodeIfPresent(isReceived, forKey: .isReceived)
        try container.encodeIfPresent(expiresAtUtc, forKey: .expiresAtUtc)
        try container.encodeIfPresent(activities, forKey: .activities)
        try container.encodeIfPresent(approvedConsentRequests, forKey: .approvedConsentRequests)
    }
}

