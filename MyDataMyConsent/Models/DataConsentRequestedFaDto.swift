//
// DataConsentRequestedFaDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DataConsentRequestedFaDto: Codable, Hashable {

    public var drn: String?
    public var fromDatetime: Date?
    public var toDatetime: Date?
    public var providerId: UUID?
    public var accountType: FinancialAccountTypes?
    public var accountIdentifier: String?
    public var filters: [DataConsentRfaFilterDto]?

    public init(drn: String? = nil, fromDatetime: Date? = nil, toDatetime: Date? = nil, providerId: UUID? = nil, accountType: FinancialAccountTypes? = nil, accountIdentifier: String? = nil, filters: [DataConsentRfaFilterDto]? = nil) {
        self.drn = drn
        self.fromDatetime = fromDatetime
        self.toDatetime = toDatetime
        self.providerId = providerId
        self.accountType = accountType
        self.accountIdentifier = accountIdentifier
        self.filters = filters
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case drn
        case fromDatetime
        case toDatetime
        case providerId
        case accountType
        case accountIdentifier
        case filters
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(drn, forKey: .drn)
        try container.encodeIfPresent(fromDatetime, forKey: .fromDatetime)
        try container.encodeIfPresent(toDatetime, forKey: .toDatetime)
        try container.encodeIfPresent(providerId, forKey: .providerId)
        try container.encodeIfPresent(accountType, forKey: .accountType)
        try container.encodeIfPresent(accountIdentifier, forKey: .accountIdentifier)
        try container.encodeIfPresent(filters, forKey: .filters)
    }
}

