//
// FinancialAccountCreditCardTransaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FinancialAccountCreditCardTransaction: Codable, JSONEncodable, Hashable {

    public var type: String
    public var id: String
    public var txnType: CreditCardTransactionType
    public var txnDate: Date
    public var amount: Float
    public var valueDate: Date
    public var narration: String
    public var statementDate: Date
    public var mcc: String
    public var maskedCardNumber: String

    public init(type: String, id: String, txnType: CreditCardTransactionType, txnDate: Date, amount: Float, valueDate: Date, narration: String, statementDate: Date, mcc: String, maskedCardNumber: String) {
        self.type = type
        self.id = id
        self.txnType = txnType
        self.txnDate = txnDate
        self.amount = amount
        self.valueDate = valueDate
        self.narration = narration
        self.statementDate = statementDate
        self.mcc = mcc
        self.maskedCardNumber = maskedCardNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case id
        case txnType = "txn_type"
        case txnDate = "txn_date"
        case amount
        case valueDate = "value_date"
        case narration
        case statementDate = "statement_date"
        case mcc
        case maskedCardNumber = "masked_card_number"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(id, forKey: .id)
        try container.encode(txnType, forKey: .txnType)
        try container.encode(txnDate, forKey: .txnDate)
        try container.encode(amount, forKey: .amount)
        try container.encode(valueDate, forKey: .valueDate)
        try container.encode(narration, forKey: .narration)
        try container.encode(statementDate, forKey: .statementDate)
        try container.encode(mcc, forKey: .mcc)
        try container.encode(maskedCardNumber, forKey: .maskedCardNumber)
    }
}

