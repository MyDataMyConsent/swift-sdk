//
// GetConsentTemplateDetailsDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetConsentTemplateDetailsDto: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var name: String?
    public var description: String?
    public var consentPurpose: String?
    public var collectables: [CollectibleTypes]?
    public var fetchType: FetchTypes?
    public var shortId: String?
    public var createdBy: String?
    public var createdAtUtc: Date?
    public var status: String?
    public var templateType: ConsentTemplateTypes?
    public var dataLife: Life?
    public var requestLife: Life?
    public var frequency: Life?
    public var identity: [IdentitySupportedFields]?
    public var documents: [Document]?
    public var financials: [Financial]?
    public var healthRecords: [AnyCodable]?
    public var approvedBy: UUID?
    public var approvedAtUtc: Date?

    public init(id: UUID? = nil, name: String? = nil, description: String? = nil, consentPurpose: String? = nil, collectables: [CollectibleTypes]? = nil, fetchType: FetchTypes? = nil, shortId: String? = nil, createdBy: String? = nil, createdAtUtc: Date? = nil, status: String? = nil, templateType: ConsentTemplateTypes? = nil, dataLife: Life? = nil, requestLife: Life? = nil, frequency: Life? = nil, identity: [IdentitySupportedFields]? = nil, documents: [Document]? = nil, financials: [Financial]? = nil, healthRecords: [AnyCodable]? = nil, approvedBy: UUID? = nil, approvedAtUtc: Date? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.consentPurpose = consentPurpose
        self.collectables = collectables
        self.fetchType = fetchType
        self.shortId = shortId
        self.createdBy = createdBy
        self.createdAtUtc = createdAtUtc
        self.status = status
        self.templateType = templateType
        self.dataLife = dataLife
        self.requestLife = requestLife
        self.frequency = frequency
        self.identity = identity
        self.documents = documents
        self.financials = financials
        self.healthRecords = healthRecords
        self.approvedBy = approvedBy
        self.approvedAtUtc = approvedAtUtc
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case description
        case consentPurpose
        case collectables
        case fetchType
        case shortId
        case createdBy
        case createdAtUtc
        case status
        case templateType
        case dataLife
        case requestLife
        case frequency
        case identity
        case documents
        case financials
        case healthRecords
        case approvedBy
        case approvedAtUtc
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(consentPurpose, forKey: .consentPurpose)
        try container.encodeIfPresent(collectables, forKey: .collectables)
        try container.encodeIfPresent(fetchType, forKey: .fetchType)
        try container.encodeIfPresent(shortId, forKey: .shortId)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(createdAtUtc, forKey: .createdAtUtc)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(templateType, forKey: .templateType)
        try container.encodeIfPresent(dataLife, forKey: .dataLife)
        try container.encodeIfPresent(requestLife, forKey: .requestLife)
        try container.encodeIfPresent(frequency, forKey: .frequency)
        try container.encodeIfPresent(identity, forKey: .identity)
        try container.encodeIfPresent(documents, forKey: .documents)
        try container.encodeIfPresent(financials, forKey: .financials)
        try container.encodeIfPresent(healthRecords, forKey: .healthRecords)
        try container.encodeIfPresent(approvedBy, forKey: .approvedBy)
        try container.encodeIfPresent(approvedAtUtc, forKey: .approvedAtUtc)
    }
}

